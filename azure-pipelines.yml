# trigger: none

   #batch: true
  # branches:
  #   include:
  #     - main

pool: 
 vmImage: ubuntu-latest

  #environment: 'Approval'


# steps:
#   - script: |
#       #!/bin/bash
#       echo "Building the Docker image from Azure DevOps Repo..."
#     displayName: 'Deploy to ECS'
        

#lockBehavior: sequential
#stages:
# - stage: BuildandDeployStage
#   jobs:
#   - job: BuildAndDeploy
#     displayName: 'Build and Deploy Job'
    #pool: server
    #steps:
    # - task: AzureStaticWebApp@0
    #   inputs:
    #     app_location: '/src'
    #     api_location: 'api'
    #     output_location: '/src'
    #     azure_static_web_apps_api_token: $(deployment_token)
    #     repo_token: $(GITHUB_TOKEN)
    #     action: 'upload'
    # - task: ManualValidation@1
    #   inputs:
    #     notifyUsers: 'sagpatel@microsoft.com'
    #     approvers: 'sagpatel@microsoft.com'
    #     allowApproversToApproveTheirOwnRuns: true
    # - task: CmdLine@2
    #   inputs:
    #     script: 'echo "BuildandDeploy"'
  #- stage: ExecuteCommands
    # dependsOn: BuildandDeployStage
    #jobs:
    # - job: ExecuteCommands
    #   displayName: 'Execute Commands'
    #   strategy:
    #     parallel: 0
    # - stage: SendEmail
    #   jobs:
    #    - job: SendEmail
    #      steps:
    #       - task: Bash@3
    #         inputs:
    #           targetType: 'inline'
    #           script: |
    #             # Send an email with the file attached
    #             echo "The file has been generated and stored on the self-hosted agent. Please find the attached file." | mail -s "Pipeline File" -a /path/to/self-hosted-agent/directory/yourfile_part_* sagpatel@microsoft.com
          # - task: CmdLine@2
          #   inputs:
          #     script: 'echo "Hello"'
          # - task: SendEmail@1
          #   inputs:              
          #     To: 'sagpatel@microsoft.com'
          #     From: 'sagpatel@microsoft.com'
          #     Subject: 'Pipeline File'
          #     Body: 'The file has been uploaded. You can download it from the following link: https://your-storage-account.blob.core.windows.net/your-container/your-blob-prefix/yourfile.zip'

  

# - job: ClosePullRequest
#   displayName: 'Close Pull Request Job'
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - task: AzureStaticWebApp@0
#     inputs:
#       azure_static_web_apps_api_token: $(deployment_token)
#       action: 'close'
  # - task: PublishPipelineArtifact@1
  #   inputs:
  #     targetPath: '$(Pipeline.Workspace)'
  #     artifact: 'Demo'
  #     publishLocation: 'pipeline'
# jobs:
# - job: A
#   steps:
#   - bash: echo "A"
#steps:

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'MCAPS-Support-REQ-73994-2024-SagarPatel (7f57655a-cc45-499d-bcc5-673c62b0f89f)'
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     addSpnToEnvironment: true
#     inlineScript: |
#       subscription_id=$(az account list --query "[?isDefault].id"|jq -r '.[0]')
#       echo "##vso[task.setvariable variable=ARM_CLIENT_ID]$(CLIENT_ID)"
#       echo "##vso[task.setvariable variable=ARM_TENANT_ID]16b3c013-d300-468d-ac64-7eda0820b6d3"
#       echo "##vso[task.setvariable variable=ARM_USE_MSI]"
#       echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID]$subscription_id"
    # - task: AzureCLI@2
    #   displayName: 'Set Environment Variables and import metastore'
    #   inputs:
    #     azureSubscription: 'Cx-Test'
    #     scriptType: 'bash'
    #     scriptLocation: 'inlineScript'
    #     useGlobalConfig: true
    #     #workingDirectory: 'infrastructure/resourcegroup/soda-shared-services/databricks/metastore-uc-deployment'
    #     inlineScript: |
    #       export ARM_USE_MSI=true
    #       export ARM_SUBSCRIPTION_ID=7f57655a-cc45-499d-bcc5-673c62b0f89f
    #       export ARM_TENANT_ID=72f988bf-xxxx-xxxx-xxxx-xxxxxxxxxxxx
    #       az login --identity 
    #       az account set -s "7f57655a-cc45-499d-bcc5-673c62b0f89f"
    #       $accessToken = az account get-access-token --resource 499b84ac-1321-427f-aa17-267ca6975798 --query "accessToken" --output tsv
    #       curl -s -H 'Accept:application/json' -H 'Authorization:Bearer $accessToken' https://dev.azure.com/sagpatel0597/_apis/projects
    
          # - task: CmdLine@2
          #   inputs:
          #     script: |
          #       export ARM_USE_MSI=true
          #                 export ARM_SUBSCRIPTION_ID=7f57655a-cc45-499d-bcc5-673c62b0f89f
          #                 export ARM_TENANT_ID=16b3c013-d300-468d-ac64-7eda0820b6d3
          #                 az login --identity 
          #                 az account set -s "7f57655a-cc45-499d-bcc5-673c62b0f89f"
          #                 $accessToken = az account get-access-token --resource 499b84ac-1321-427f-aa17-267ca6975798 --query "accessToken" --output tsv
          #                 curl -s -H 'Accept:application/json' -H 'Authorization:Bearer $accessToken' https://dev.azure.com/sagpatel0597/_apis/projects

# - task: AzureCLI@2
#   inputs:
#     azureSubscription: 'uamanagedidentity'
#     scriptType: 'bash'
#     scriptLocation: 'inlineScript'
#     inlineScript: |
#       # Create the Terraform configuration file
#       echo 'provider "azurerm" {
#         subscription_id = "7f57655a-cc45-499d-bcc5-673c62b0f89f"
#         resource_provider_registrations = "none"
#         features {}
#       }

#       resource "azurerm_resource_group" "example" {
#         name     = "AzureMonitorDemo"
#         location = "East US"
#       }

#       resource "azurerm_virtual_machine_scale_set" "example" {
#         name                = "Cx-Test"
#         location            = azurerm_resource_group.example.location
#         resource_group_name = azurerm_resource_group.example.name
#         sku {
#           name     = "Standard_DS1_v2"
#           tier     = "Standard"
#           capacity = 2
#         }
#         upgrade_policy_mode = "Manual"
#         os_profile {
#           computer_name_prefix = "vmss"
#           admin_username       = "adminuser"
#           admin_password       = "Password1234!"
#         }
#         network_profile {
#           name    = "example-network-profile"
#           primary = true
#           ip_configuration {
#             name      = "example-ip-config"
#             subnet_id = "/subscriptions/7f57655a-cc45-499d-bcc5-673c62b0f89f/resourceGroups/AzureMonitorDemo/providers/Microsoft.Network/virtualNetworks/example-vnet/subnets/default"
#           }
#         }
#       }' > /home/vsts/work/1/s/main.tf
      
#       # Change to the directory with the configuration files
#       cd /home/vsts/work/1/s
      
#       # Initialize Terraform
#       terraform init
      
#       # Import the VMSS
#       terraform import azurerm_virtual_machine_scale_set.example /subscriptions/7f57655a-cc45-499d-bcc5-673c62b0f89f/resourceGroups/AzureMonitorDemo/providers/Microsoft.Compute/virtualMachineScaleSets/Cx-Test
#steps:
# - task: Bash@3
#   displayName: Capture TCP dump from VMSS instance
#   inputs:
#     targetType: 'inline'
#     script: |
#       echo "Capturing TCP dump from this VMSS instance..."
#       timeout 300 sudo tcpdump -i any -nn "src $(hostname -I | awk '{print $1}') and dst host contoso.com" \
#       -w vmss_to_databricks.pcap
#       echo "TCP dump completed and saved as vmss_to_databricks.pcap"
# - task: PublishBuildArtifacts@1
#   displayName: Upload TCP dump as artifact
#   inputs:
#     PathtoPublish: 'vmss_to_databricks.pcap'
#     ArtifactName: 'TcpDumpLogs'

# - task: PowerShell@2
#   displayName: Capture TCP dump from VMSS instance
#   inputs:
#     targetType: 'inline'
#     script: |
#       # Write-Host "Capturing TCP dump from this VMSS instance..."
#       # $timestamp = Get-Date -Format "yyyyMMddHHmmss"
#       # $outputPath = "$(System.DefaultWorkingDirectory)\vmss_to_databricks_$timestamp.etl"
#       # netsh trace start capture=yes tracefile=$outputPath maxSize=512
#       # Start-Sleep -Seconds 300
#       # netsh trace stop
#       # Write-Host "TCP dump completed and saved as $outputPath"
#       Write-Host "Starting TCP dump in background using netsh trace..."
#       # $tracePath = "$(System.DefaultWorkingDirectory)\vmss.etl"
#       # $traceCommand = "netsh trace start capture=yes tracefile=`"$tracePath`" maxSize=512"
#       # $traceCommand = "netsh trace start capture=yes tracefile="" maxSize=512"
#       #Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile -WindowStyle Hidden -Command `$ErrorActionPreference='Stop'; $traceCommand" -WindowStyle Hidden
#       Start-Process -FilePath "powershell.exe" -ArgumentList "-NoProfile -WindowStyle Hidden -Command `"netsh trace start capture=yes tracefile='$(System.DefaultWorkingDirectory)\vmss.etl' maxSize=512`""
#       Write-Host "Trace started in background. It will continue running independently."
# - task: PowerShell@2
#   displayName: Hello World
#   inputs:
#     targetType: 'inline'
#     script: |
#       Write-Host "Hello World"
#        echo "Starting DACPAC deployment..."
#       # sqlpackage /Action:Publish \
#       #   /AccessToken:$sql_token \
#       #   /SourceFile:"$(System.DefaultWorkingDirectory)/your.dacpac" \
#       #   /TargetConnectionString:"Server=tcp:<your-sql-server>.database.windows.net,1433;Initial Catalog=<your-db>;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;" \
#       #   /p:CommandTimeout=120 || echo "⚠️ DACPAC deployment failed"
#       # echo "DACPAC deployment completed."
#       sleep 100
#   continueOnError: true
# - task: PowerShell@2
#   displayName: Stop TCP dump after Application/SQL deployment task
#   inputs:
#     targetType: 'inline'
#     script: |
#       Write-Host "Waiting for 5 minutes before stopping trace..."
#       Start-Sleep -Seconds 5
#       Write-Host "Stopping TCP dump..."
#       netsh trace stop
#       Write-Host "Trace stopped."

# - task: PublishBuildArtifacts@1
#   displayName: Upload TCP dump as artifact
#   inputs:
#     PathtoPublish: '$(System.DefaultWorkingDirectory)\vmss.etl'
#     ArtifactName: 'TcpDumpLogs'

steps:
# - task: AzurePowerShell@5
#   inputs:
#     azureSubscription: 'LabKeyVaultConnection'
#     ScriptType: 'InlineScript'
#     Inline: |
#       Write-Host "Starting long-running authenticated task..."
#       $startTime = Get-Date
#       while (((Get-Date) - $startTime).TotalMinutes -lt 65) {
#         try {
#           # Simulate an authenticated Azure call
#           Get-AzContext | Out-Null
#           Write-Host "Authenticated call succeeded at $(Get-Date)"
#         } catch {
#           Write-Host "Authentication failed or token expired at $(Get-Date)"
#           Write-Host $_.Exception.Message
#         }
#         Start-Sleep -Seconds 60
#       }
#       Write-Host "Completed simulated long-running task."
#     azurePowerShellVersion: 'LatestVersion'
#     #pwsh: true
#   timeoutInMinutes: 70

- task: NetworkPreflight.HttpCheck@1
  displayName: 'HTTP(S) Connectivity Test'
  inputs:
    targets: |
      https://www.microsoft.com
      https://login.microsoftonline.com/.well-known/openid-configuration
    method: HEAD
    timeoutSeconds: 10
    retries: 1
    expectStatus: 200-399
    maxLatencyMs: 2000
