# resources:
#   repositories:
#   - repository: sre-pipeline
#     type: git
#     name: SRE.Builds
#   - repository: srcDevRepo
#     path: $(Build.SourcesDirectory)
#     type: git
#     name: ocp-cluster-observability
trigger: none
#name: $(Build.DefinitionName)_$(semVersion)$(Rev:.r)
parameters:
- name: validateVarsOnly
  type: boolean
  default: false
- name: multiParallelEnv
  type: boolean
  default: true
variables:
- name: semVersion
  value: 1.0
stages:
- stage: OpenshiftDev02__openshift_cluster_observability_operator__cluster_observability_operator__
  displayName: Openshift Dev02 - cluster-observability-operator
  dependsOn: []
  pool:
    vmImage: ubuntu-latest
  variables:
  - name: target.k8splatform
    value: ocp
  - name: upperK8splatform
    value: OCP
  - group: Openshift Dev02 - infra
  - name: occluster.project
    value: openshift-cluster-observability-operator
  - name: cluster.namespace
    value: openshift-cluster-observability-operator
  - name: service.identifier
    value: cluster-observability-operator
  - name: image.identifier
    value: $(image.repo)/:$(Build.BuildNumber)
  - name: service.buildid
    value: '"$(Build.BuildNumber)"'
  - name: service.buildidnoquotes
    value: '$(Build.BuildNumber)'
  - name: argocd.identifier
    value: $(service.identifier)
  - name: ns.annotate.node.select
    value: ' '
  - name: cluster.gitops-name
    value: $(cluster.name)
  - name: argocd.context
    value: infra
  - name: argocdSyncTimeout
    value: '600'
  - name: argocd.sync.prune
    value: '--prune'
  - name: argocd.sync.insecure
    value: '--insecure'
  - name: argocd.syncPolicy
    value: '{}'
  - name: ado.argocd.diffignore
    value: ' '
  - name: argocd.diffignore
    value: ' '
  - name: argocd.service.labels
    value: ' '
  - name: argocd.recurse
    value: |
      directory:
            recurse: true
  - name: helm.enabled
    value: ' '
  - name: manifestspath
    value: observability
  - name: tokenPattern
    value: 'doublebraces'
  - name: semVersion
    value: 1.0
  - name: Build.BuildNumber
    value: $(semVersion)$(Rev:.r)
  - name: MANIFEST_DIR
    value: $(System.DefaultWorkingDirectory)/$(gitops.repo)
  - name: ARGOCD_APPS_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml
  - name: ARGOCD_SERVICE_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml
  - name: ARGOCD_BOOTSTRAP_APPS_RBAC
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps
  - name: ARGOCD_BOOTSTRAP_NAMESPACE
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap
  - name: DEPLOY_BRANCH_NAME
    value: deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)
  - name: ARGOCD_SERVICE_FOLDER
    value: $(cluster.name)/$(cluster.namespace)
  - name: MANIFESTS_FOLDER
    value: $(cluster.name)/$(cluster.namespace)/$(service.identifier)
  - name: sourceCodeRepo
    value: $[ resources.repositories['srcDevRepo'].name ]
  - name: MANIFESTS_ARTIFACT_PATH
    value: $(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)
  - name: ARGOCD_NAMESPACE_FOLDER
    value: $(cluster.name)/argocd-$(argocd.context)
  - name: sub.channel
    value: stable
  - name: ip.approval
    value: Automatic
  - name: startingCSV
    value: cluster-observability-operator.v1.1.0
  jobs:
  - job: "Validate_variables"
    displayName: "Validate_variables"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      condition: false
      inputs:
        repository: none
    - task: CmdLine@2
      displayName: "View variables"
      inputs:
        script: "echo \"Parameters passed to pipeline:\"\necho '{\n  \"argocd\": {\n    \"k8sGitOpsArgoCD\": \"\",\n    \"k8s\": {\n      \"k8splatform\": \"ocp\",\n      \"environment\": \"Openshift Dev02\",\n      \"namespace\": \"openshift-cluster-observability-operator\",\n      \"serviceIdentifier\": \"cluster-observability-operator\"\n    },\n    \"argocd\": {\n      \"context\": \"infra\",\n      \"namespaceNodeSelect\": \"worker\",\n      \"syncInsecure\": \"True\",\n      \"syncPrune\": \"True\"\n    },\n    \"manifests\": {\n      \"path\": \"observability\"\n    },\n    \"customVarsTemplate\": \"vars.yaml\"\n  },\n  \"dockerContainerRegistry\": \"\",\n  \"dockerimage\": \"\",\n  \"validateVarsOnly\": \"False\",\n  \"appDynamics\": {},\n  \"multiParallelEnv\": \"True\",\n  \"stagename\": \"Openshift Dev02__openshift-cluster-observability-operator__cluster-observability-operator__\",\n  \"selfServicePipeline\": \"False\"\n}'\ncat <<'EOF'\nStage info: \n    name: $(System.StageName) \n    display: $(System.StageDisplayName) \n    attempt: $(System.StageAttempt)\nParameters/Variables defined or defaulted when calling k8sGitOpsArgoCD listed below:\n  k8s:\n    k8splatform: $(target.k8splatform)\n    ADO Environment: Openshift Dev02\n    ADO Variable Group: Openshift Dev02 - $(argocd.context)\n    project: $(occluster.project)\n    namespace: $(cluster.namespace)\n    serviceIdentifier: $(service.identifier)\n    image.identifier: $(image.identifier)\n    service.buidid: $(service.buildid)\n    argocd.identifier: $(argocd.identifier)\n    namespaceNodeSelect: $(ns.annotate.node.select)\n  argocd: \n    context: $(argocd.context)\n    syncStep: \n    syncTimeout: $(argocdSyncTimeout)\n    syncPrune: $(argocd.sync.prune)\n    syncInsecure: $(argocd.sync.insecure)\n    autoSyncPolicy: $(argocd.syncPolicy)\n    diffIgnore: $(ado.argocd.diffignore)\n    recurse: $(argocd.recurse)\n  manifests:\n    path: $(manifestspath)\n    replaceTokenPattern: $(tokenPattern)\n  customVarsTemplate: vars.yaml\nMisc ADO build vars:\n  semVersion: $(semVersion)\n  Build.BuildNumber: $(Build.BuildNumber)\nGitOps Directories involved in next steps:\n  MANIFEST_DIR: $(MANIFEST_DIR)\n  ARGOCD_APPS_MANIFEST: $(ARGOCD_APPS_MANIFEST)\n  ARGOCD_SERVICE_MANIFEST: $(ARGOCD_SERVICE_MANIFEST)\n  ARGOCD_BOOTSTRAP_APPS_RBAC: $(ARGOCD_BOOTSTRAP_APPS_RBAC)\n  ARGOCD_BOOTSTRAP_NAMESPACE: $(ARGOCD_BOOTSTRAP_NAMESPACE)\n  DEPLOY_BRANCH_NAME: $(DEPLOY_BRANCH_NAME)\n  ARGOCD_SERVICE_FOLDER: $(ARGOCD_SERVICE_FOLDER)\n  MANIFESTS_FOLDER: $(MANIFESTS_FOLDER)\n  MANIFESTS_ARTIFACT_PATH: $(MANIFESTS_ARTIFACT_PATH)\n  ARGOCD_NAMESPACE_FOLDER: $(ARGOCD_NAMESPACE_FOLDER)\nEOF\necho \"Variables passed in from App team var template:\"\necho '{\n  \"system\": \"build\",\n  \"system.hosttype\": \"build\",\n  \"system.servertype\": \"Hosted\",\n  \"system.culture\": \"en-US\",\n  \"system.collectionId\": \"a1d50930-84e6-45c1-8b89-a50cf285f127\",\n  \"system.collectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.teamFoundationCollectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.taskDefinitionsUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.pipelineStartTime\": \"2025-04-21 12:03:10-04:00\",\n  \"system.teamProject\": \"Default\",\n  \"system.teamProjectId\": \"61eb34c0-17a0-4875-b525-7a0b0072c15e\",\n  \"system.definitionId\": \"9071\",\n  \"build.definitionName\": \"ocp-cluster-observability-ado\",\n  \"build.repository.id\": \"facbd320-4176-47dc-a2e9-10270df8e4eb\",\n  \"build.repository.name\": \"ocp-cluster-observability\",\n  \"build.repository.uri\": \"https://dev.azure.com/bki-st/Default/_git/ocp-cluster-observability\",\n  \"build.definitionVersion\": \"4\",\n  \"USE_MSDEPLOY_TOKEN_AUTH\": \"true\",\n  \"DistributedTask.Agent.AddForceCredentialsToGitCheckout\": \"True\",\n  \"DistributedTask.Agent.AgentEnablePipelineArtifactLargeChunkSize\": \"True\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated\": \"False\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated246\": \"False\",\n  \"DistributedTask.Agent.CleanupPsModulesInPowershell\": \"False\",\n  \"DistributedTask.Agent.ContinueAfterCancelProcessTreeKillAttempt\": \"True\",\n  \"DistributedTask.Agent.DockerActionRetries\": \"True\",\n  \"DistributedTask.Agent.EnableAdditionalMaskingRegexes\": \"True\",\n  \"DistributedTask.Agent.EnableIssueSourceValidation\": \"True\",\n  \"DistributedTask.Agent.EnableResourceMonitorDebugOutput\": \"True\",\n  \"DistributedTask.Agent.EnableResourceUtilizationWarnings\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedBuildTask\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedTask\": \"True\",\n  \"DistributedTask.Agent.FailJobWhenAgentDies\": \"True\",\n  \"DistributedTask.Agent.FixPossibleGitOutOfMemoryProblem\": \"False\",\n  \"DistributedTask.Agent.ForceUpdateToLatest2Version\": \"False\",\n  \"DistributedTask.Agent.IgnoreVSTSTaskLib\": \"True\",\n  \"DistributedTask.Agent.LogTaskNameInUserAgent\": \"True\",\n  \"DistributedTask.Agent.LogToBlobstorageService\": \"True\",\n  \"DistributedTask.Agent.MountWorkspace\": \"True\",\n  \"DistributedTask.Agent.ReadOnlyVariables\": \"True\",\n  \"DistributedTask.Agent.Rosetta2Warning\": \"True\",\n  \"DistributedTask.Agent.UploadBuildArtifactsToBlob\": \"True\",\n  \"DistributedTask.Agent.UploadTimelineAttachmentsToBlob\": \"True\",\n  \"DistributedTask.Agent.UseDockerComposeV2CompatibleMode\": \"False\",\n  \"DistributedTask.Agent.UseFetchFilterInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseGitLongPaths\": \"True\",\n  \"DistributedTask.Agent.UseInteropToFindParentProcess\": \"True\",\n  \"DistributedTask.Agent.UseLatestGitVersion\": \"True\",\n  \"DistributedTask.Agent.UseMsalLibrary\": \"True\",\n  \"DistributedTask.Agent.USENEWNODEHANDLERTELEMETRY\": \"True\",\n  \"DistributedTask.Agent.UseNode20ToStartContainer\": \"True\",\n  \"DistributedTask.Agent.UseSparseCheckoutInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseWorkspaceId\": \"True\",\n  \"DistributedTask.Tasks.CopyFilesOverSSHV0UseQueue\": \"True\",\n  \"DistributedTask.Tasks.ModifyNumberOfRetriesInRobocopy\": \"True\",\n  \"DistributedTask.Tasks.Node.SkipDebugLogsWhenDebugModeOff\": \"True\",\n  \"DistributedTask.Tasks.RetireAzureRMPowerShellModule\": \"True\",\n  \"DistributedTask.Tasks.useJacocoTemplateV2forSingleModule\": \"True\",\n  \"DistributedTask.Tasks.UseLatestOpensslVersion\": \"True\",\n  \"build.definitionFolderPath\": \"\\\\ocp-native-ado\",\n  \"VSTSAGENT_CONTINUE_AFTER_CANCEL_PROCESSTREEKILL_ATTEMPT\": \"true\",\n  \"VSTSAGENT_DOCKER_ACTION_RETRIES\": \"true\",\n  \"USE_MSAL\": \"true\",\n  \"AZP_75787_ENABLE_COLLECT\": \"true\",\n  \"AZP_75787_ENABLE_NEW_PH_LOGIC\": \"true\",\n  \"AZP_AGENT_CHECK_FOR_TASK_DEPRECATION\": \"true\",\n  \"AZP_AGENT_MOUNT_WORKSPACE\": \"true\",\n  \"AZP_AGENT_IGNORE_VSTSTASKLIB\": \"true\",\n  \"AZP_PS_ENABLE_INVOKE_PROCESS\": \"true\",\n  \"FAIL_DEPRECATED_TASK\": \"true\",\n  \"AZP_AGENT_LOG_TASKNAME_IN_USERAGENT\": \"true\",\n  \"AGENT_USE_FETCH_FILTER_IN_CHECKOUT_TASK\": \"true\",\n  \"AGENT_USE_SPARSE_CHECKOUT_IN_CHECKOUT_TASK\": \"true\",\n  \"USE_OPENSSL_LATEST_VERSION\": \"true\",\n  \"MODIFY_NUMBER_OF_RETRIES_IN_ROBOCOPY\": \"true\",\n  \"AZP_75787_ENABLE_NEW_LOGIC\": \"false\",\n  \"AZP_75787_ENABLE_NEW_LOGIC_LOG\": \"false\",\n  \"AGENT_ENABLE_PIPELINEARTIFACT_LARGE_CHUNK_SIZE\": \"true\",\n  \"FAIL_JOB_WHEN_AGENT_DIES\": \"true\",\n  \"USE_LATEST_GIT_VERSION\": \"true\",\n  \"USE_GIT_LONG_PATHS\": \"true\",\n  \"ENABLE_ISSUE_SOURCE_VALIDATION\": \"true\",\n  \"RETIRE_AZURERM_POWERSHELL_MODULE\": \"true\",\n  \"AZP_ENABLE_RESOURCE_MONITOR_DEBUG_OUTPUT\": \"true\",\n  \"AZP_ENABLE_RESOURCE_UTILIZATION_WARNINGS\": \"true\",\n  \"FAIL_DEPRECATED_BUILD_TASK\": \"true\",\n  \"AZP_AGENT_USE_INTEROP_TO_FIND_PARENT_PROCESS\": \"true\",\n  \"ROSETTA2_WARNING\": \"true\",\n  \"COPYFILESOVERSSHV0_USE_QUEUE\": \"true\",\n  \"USE_FIXED_AZ_CONFIG_INIT\": \"true\",\n  \"USE_AKS_CREDENTIAL_API\": \"true\",\n  \"build.queuedBy\": \"Johnson, Rohan\",\n  \"build.queuedById\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedFor\": \"Johnson, Rohan\",\n  \"build.requestedForId\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedForEmail\": \"Rohan.Johnson@bkfs.com\",\n  \"build.sourceVersion\": \"5b7f7eab5db2124d93fc9dbb2a6724441802c2af\",\n  \"build.sourceBranch\": \"refs/heads/main\",\n  \"build.sourceBranchName\": \"main\",\n  \"build.reason\": \"Manual\",\n  \"system.pullRequest.isFork\": \"False\",\n  \"system.jobParallelismTag\": \"Private\",\n  \"system.enableAccessToken\": \"SecretVariable\",\n  \"target.k8splatform\": \"ocp\",\n  \"upperK8splatform\": \"OCP\",\n  \"occluster.project\": \"openshift-cluster-observability-operator\",\n  \"cluster.namespace\": \"openshift-cluster-observability-operator\",\n  \"service.identifier\": \"cluster-observability-operator\",\n  \"image.identifier\": \"$(image.repo)/:$(Build.BuildNumber)\",\n  \"service.buildid\": \"\\\"$(Build.BuildNumber)\\\"\",\n  \"service.buildidnoquotes\": \"$(Build.BuildNumber)\",\n  \"argocd.identifier\": \"$(service.identifier)\",\n  \"ns.annotate.node.select\": \" \",\n  \"cluster.gitops-name\": \"$(cluster.name)\",\n  \"argocd.context\": \"infra\",\n  \"argocdSyncTimeout\": \"600\",\n  \"argocd.sync.prune\": \"--prune\",\n  \"argocd.sync.insecure\": \"--insecure\",\n  \"argocd.syncPolicy\": \"{}\",\n  \"ado.argocd.diffignore\": \" \",\n  \"argocd.diffignore\": \" \",\n  \"argocd.service.labels\": \" \",\n  \"argocd.recurse\": \"directory:\\n      recurse: true\\n\",\n  \"helm.enabled\": \" \",\n  \"manifestspath\": \"observability\",\n  \"tokenPattern\": \"doublebraces\",\n  \"semVersion\": \"1.0\",\n  \"Build.BuildNumber\": \"$(semVersion)$(Rev:.r)\",\n  \"MANIFEST_DIR\": \"$(System.DefaultWorkingDirectory)/$(gitops.repo)\",\n  \"ARGOCD_APPS_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml\",\n  \"ARGOCD_SERVICE_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml\",\n  \"ARGOCD_BOOTSTRAP_APPS_RBAC\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps\",\n  \"ARGOCD_BOOTSTRAP_NAMESPACE\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap\",\n  \"DEPLOY_BRANCH_NAME\": \"deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)\",\n  \"ARGOCD_SERVICE_FOLDER\": \"$(cluster.name)/$(cluster.namespace)\",\n  \"MANIFESTS_FOLDER\": \"$(cluster.name)/$(cluster.namespace)/$(service.identifier)\",\n  \"sourceCodeRepo\": \"$[ resources.repositories['srcDevRepo'].name ]\",\n  \"MANIFESTS_ARTIFACT_PATH\": \"$(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)\",\n  \"ARGOCD_NAMESPACE_FOLDER\": \"$(cluster.name)/argocd-$(argocd.context)\",\n  \"sub.channel\": \"stable\",\n  \"ip.approval\": \"Automatic\",\n  \"startingCSV\": \"cluster-observability-operator.v1.1.0\"\n}' | sed '/ARGOCD_NAMESPACE_FOLDER/,$!d ; /ARGOCD_NAMESPACE_FOLDER/d ; /^}/d'\n"
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Validate variables"
      inputs:
        script: |
          if ! [[ "$(argocd.context)" =~ ^(apps|infra)$ ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.argocd.context must be \"apps\" or \"infra\"" ; exit 1 ; fi
          if ! [[ "$(target.k8splatform)" =~ ^(eks|ocp)$ ]] ; then echo "ERROR - variable k8splatform must be \"eks\" or \"ocp\"" ; exit 1 ; fi
          if [[ "$(manifestspath)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.manifests.path is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(occluster.project)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.k8s.namespace is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(service.identifier)" == "MISSING" ]] ; then echo "ERROR - parameters.argocd.k8s.serviceIdentifier is missing from your pipeline" ; exit 1 ; fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
  - job: "GitOps_Update_Source_of_Truth"
    displayName: "GitOps_Update_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - Validate_variables
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://Default/openshift-gitops-infra@master
        persistCredentials: true
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://bre/argocd@master
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: srcDevRepo
    - task: CmdLine@2
      displayName: "Prepare temporary location for raw ArgoCD manifests"
      inputs:
        script: |
          #echo "$(image)"
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)
          echo "System.DefaultWorkingDirectory = $(System.DefaultWorkingDirectory)"
          echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
          echo "Build.DefinitionName = $(Build.DefinitionName)"
          #echo "tree Build.SourcesDirectory"
          #tree $(Build.SourcesDirectory)
          #echo "tree Pipeline.Workspace"
          #tree $(Pipeline.Workspace)/
          #echo "tree DEPLOY_BRANCH_NAME"
          #tree $(DEPLOY_BRANCH_NAME)/
          #tree $(Pipeline.Workspace)
          echo "Copy ArgoCD Namespace Application template to GitOps repo directory"
          cp $(ARGOCD_APPS_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml
          echo "Copy ArgoCD Service Application template to GitOps repo directory"
          cp $(ARGOCD_SERVICE_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
          echo "Copy ArgoCD Bootstrap Namespace template(s) to GitOps repo directory"
          cp $(ARGOCD_BOOTSTRAP_NAMESPACE)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          if [[ "$(argocd.context)" == "apps" && "$(target.k8splatform)" == "ocp" ]] || [[ "$(target.k8splatform)" == "eks" ]]  ; then
            echo "Copy ArgoCD Namespace RBAC template(s) to GitOps repo directory"
            cp $(ARGOCD_BOOTSTRAP_APPS_RBAC)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Configure Git"
      env:
        USER_NAME: "Git-Ops"
        USER_EMAIL: "<>"
      retryCountOnTaskFailure: 2
      inputs:
        script: |
          echo "User: $USER_NAME"
          echo "User email: $USER_EMAIL"
          git config user.email $USER_EMAIL & git config user.name $USER_NAME
        failOnStderr: true
        workingDirectory: $(MANIFEST_DIR)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for ArgoCD Applications and Bootstrap files"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: Prepare temporary location for raw app/infra manifests
      inputs:
        script: |
          echo "$(MANIFESTS_ARTIFACT_PATH)"
          ls -la $(MANIFESTS_ARTIFACT_PATH)
          echo "$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/"
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/

          echo "Copy k8s manifests for $(argocd.identifier) and stage them into GitOps repo directory"
          cp -r $(MANIFESTS_ARTIFACT_PATH)/* $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for bk app/infra manifests"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: '$(tokenPattern)'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: "Purge lines containing only whitespaces in argocd app manifests"
      inputs:
        script: |
          sed -i '/^[[:space:]]*$/d' $(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)
    - task: CmdLine@2
      displayName: "Add Generated Manifest to New Branch"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo \"Create a new branch$(DEPLOY_BRANCH_NAME)\"\ngit checkout -b $(DEPLOY_BRANCH_NAME)\nmkdir -p $(ARGOCD_NAMESPACE_FOLDER)\nmkdir -p $(MANIFESTS_FOLDER)\ncp $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_NAMESPACE_FOLDER)/\nls -l $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/\nls -l $(ARGOCD_SERVICE_FOLDER)/\ncp -r $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/* $(ARGOCD_SERVICE_FOLDER)/\nrsync --delete -rv $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/ $(MANIFESTS_FOLDER)/\ngit add -A 2>&1\necho 'git commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v'\ngit commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v 2>&1\n# echo 'git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v'\n# git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \ngit push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\necho \"done with initial push\"\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
    - task: CmdLine@2
      displayName: "Merge PR for GitOps repo"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
        displayName: "Create and complete Pull Request in GitOps repo"
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo $(System.AccessToken) | az devops login\naz devops configure --defaults organization=https://dev.azure.com/bki-st project=\"Default\" --use-git-aliases true\necho \"Create PR for branch $(DEPLOY_BRANCH_NAME)\"\nPR_ID=\"\"\naz repos pr create --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) --title \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\" --squash | jq '.pullRequestId' > $(Agent.TempDirectory)/PR_ID\nexport PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\necho \"PRID: $PR_ID\"\nif [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n  #az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME)\n  az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) | jq '.[] | .pullRequestId' > $(Agent.TempDirectory)/PR_ID\n  export PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\n  echo \"PRID: $PR_ID\"\n  if [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n    echo \"ERROR: could not get a PR_ID\"\n    exit 1\n  fi\nfi\n###########################\nPR_STATUS=\"\"\nif [[ $(System.debug) == 'True' ]]; then\n  echo\n  echo\n  echo \"PR_DEBUG:\"\n  echo\n  az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus'\n  echo\n  echo\nfi\nPR_TRIES=\"1 2 3 4 5\"\nfor PR_TRY in PR_TRIES\ndo\n  PR_STATUS=$(az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus')\n  if [[ \"$PR_STATUS\" == \"succeeded\" ]]; then\n    break\n  elif [[ \"$PR_STATUS\" == \"conflicts\" ]]; then\n    echo \"MERGE Confilct detected .. merge not complete\"\n    echo \"MERGE Status: $PR_STATUS\"\n\n    # ########## New Code\n    # Generate a random number between 1 and 10\n    RANDOM_WAIT=$(( ( RANDOM % 10 ) + 1 ))\n\n    # Wait for the random number of seconds\n    echo \"Waiting for $RANDOM_WAIT seconds...\"\n    sleep $RANDOM_WAIT\n\n    echo \"Checking git remote origin\"\n    git config --get-all remote.origin.fetch\n\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    echo \"Fetching latest changes from master branch\"\n    git fetch origin master\n\n    echo \"Switching to trunk\"\n    git checkout master\n\n    echo \"Pulling latest changes from remote\"\n    git pull\n\n    echo \"Switching back to $(DEPLOY_BRANCH_NAME)\"\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    # This pull was extremely helpful in understanding the underlying problem.\n    # echo \"Pulling latest changes from master branch\"\n    # git pull https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) master\n\n    echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    git merge origin/master -X ours --no-edit\n\n    #Check if the merge was successful\n    if [ $? -ne 0 ]; then\n      echo \"Merge conflicts detected. Listing conflicted files:\"\n      git diff --name-only --diff-filter=U\n    else\n      echo \"No conflicts detected.\"\n    fi\n\n    echo \"checking git status\"\n    git status\n\n    echo \"Pushing git change\"\n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n\n    echo \"checking git status\"\n    git status\n    \n\n    # echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    # git merge origin/master -X ours --no-edit\n\n    # # Check if the merge was successful\n    # if [ $? -ne 0 ]; then\n    #   CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)\n    #   echo \"Conflicted files: $CONFLICTED_FILES\"\n    #   # Resolve conflicts by preferring changes from the current branch\n    #   for FILE in $CONFLICTED_FILES; do\n    #     git checkout --ours $FILE\n    #     git add $FILE\n    #   done\n\n      # Commit the resolved conflicts\n      git commit -m \"Resolved merge conflicts by preferring current branch changes\"\n\n    # fi\n\n    echo \"Pushing merged changes into $(DEPLOY_BRANCH_NAME)\"\n    # git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n    # ## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n    echo \"done\"\n    # ########## End New Code\n\n    echo \"Resolve conflict at this URL: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\n    exit 1\n  else\n    echo \"PR_STATUS = $PR_STATUS\"\n  fi\n  sleep 1\ndone\nif [[ \"$PR_STATUS\" != \"succeeded\" ]]; then\n  echo \"Pull Request did NOT complete in 5sec .. PR not completed\"\n  echo \"Pull Request Status: $PR_STATUS\"\n  exit 1\nfi\n################################\necho \"Completing PR: deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\"\naz repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\"\n################################\nattempts=3\n## Trying to complete the PR 3 times\nwhile : ; do\n  az repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\" | jq --unbuffered '.closedBy' > closed_by_file\n  export CLOSED_BY=`cat closed_by_file`\n  echo \"PR closed by: $CLOSED_BY\"\n  if [[ $CLOSED_BY == 'null' ]]; then\n    sleep 1\n  else\n    ## Ensure that source branch is deleted\n    cd $(MANIFEST_DIR)\n    git push origin --delete $(DEPLOY_BRANCH_NAME)\n    break\n  fi\n  ((attempts--))\n  [[ $attempts > 0 ]] || break\ndone\n## If the PR has not been completed, forcing a pipeline failure\nif [[ $CLOSED_BY == 'null' ]]; then\n  echo \"##vso[task.logissue type=error]The gitops workflow was not able to complete the automated PR for for $(service.identifier) service in $(cluster.name) cluster.\"\n  exit 1\nelse\n  echo \"##[debug]Gitops PR for $(service.identifier) service in $(cluster.name) cluster completed: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\nfi\n##############################\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
  - deployment: "ArgoCD_Sync_Source_of_Truth"
    displayName: "ArgoCD_Sync_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - GitOps_Update_Source_of_Truth
    environment:
      name: Openshift Dev02
    pool:
      name: ST-AgentPool
      demands:
      - Agent.OS -equals Linux
    container:
      image: enterpriseartifactory.bkfs.com:5000/bre/containers/bre_ubi8_oc:latest
      options: --entrypoint=""
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            condition: false
            inputs:
              alias: none
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 1: $(argocd.context) > $(cluster.namespace)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# Show ArgoCD version\n  argocd version $(argocd.sync.insecure)\n# ArgoCD sync phase 1 - best effort to reach service.identifer sync:\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing root ado-$(argocd.context)'s Applications - specifically Namespace $(cluster.namespace) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(cluster.namespace) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait ado-$(argocd.context) --sync --resource argoproj.io:Application:$(cluster.namespace) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait ado-$(argocd.context) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync ado-$(argocd.context) $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true\n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait ado-$(argocd.context) --sync --operation $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 2: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# ArgoCD sync phase 2 - best effort to run Project bootstrap PreSync Hook Job and sync service.identifer(s):\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing/Running ArgoCD Namespace bootstrap Job - to create k8s Namespace $(cluster.namespace) and sync all leaf Service Applications - including $(argocd.identifier) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(argocd.identifier) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait $(cluster.namespace) --sync --resource argoproj.io:Application:$(argocd.identifier) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    if argocd app get $(cluster.namespace) $(argocd.sync.insecure) | grep rbac.authorization | grep OutOfSync\n    then\n      notsync=$((notsync+1))\n    fi\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait $(cluster.namespace) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync $(cluster.namespace) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait $(cluster.namespace) --sync --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 3: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) > $(service.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: |
                # ArgoCD sync phase 3 - wait for everything, including health:
                  date
                  try_fail="1 2 3 4 5"
                  for fail in try_fail;
                  do
                      echo "PipeStatus: ${PIPESTATUS[@]}"
                      echo -e "\n\n\n############# Syncing all k8s manifests under leaf Service Application $(argocd.identifier) #############"
                      echo "Performing sync..."
                      argocd app sync $(argocd.identifier) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi
                      echo "Post argocd app wait for active/pending --sync & --health status"
                      argocd app wait $(argocd.identifier) $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result; if [[ $(cat result) -ne 0 ]];then sleep 1;fi
                  done
                  date
- stage: OpenshiftDev01__openshift_cluster_observability_operator__cluster_observability_operator__
  displayName: Openshift Dev01 - cluster-observability-operator
  dependsOn: []
  pool:
    vmImage: ubuntu-latest
  variables:
  - name: target.k8splatform
    value: ocp
  - name: upperK8splatform
    value: OCP
  - group: Openshift Dev01 - infra
  - name: occluster.project
    value: openshift-cluster-observability-operator
  - name: cluster.namespace
    value: openshift-cluster-observability-operator
  - name: service.identifier
    value: cluster-observability-operator
  - name: image.identifier
    value: $(image.repo)/:$(Build.BuildNumber)
  - name: service.buildid
    value: '"$(Build.BuildNumber)"'
  - name: service.buildidnoquotes
    value: '$(Build.BuildNumber)'
  - name: argocd.identifier
    value: $(service.identifier)
  - name: ns.annotate.node.select
    value: ' '
  - name: cluster.gitops-name
    value: $(cluster.name)
  - name: argocd.context
    value: infra
  - name: argocdSyncTimeout
    value: '600'
  - name: argocd.sync.prune
    value: '--prune'
  - name: argocd.sync.insecure
    value: '--insecure'
  - name: argocd.syncPolicy
    value: '{}'
  - name: ado.argocd.diffignore
    value: ' '
  - name: argocd.diffignore
    value: ' '
  - name: argocd.service.labels
    value: ' '
  - name: argocd.recurse
    value: |
      directory:
            recurse: true
  - name: helm.enabled
    value: ' '
  - name: manifestspath
    value: observability
  - name: tokenPattern
    value: 'doublebraces'
  - name: semVersion
    value: 1.0
  - name: Build.BuildNumber
    value: $(semVersion)$(Rev:.r)
  - name: MANIFEST_DIR
    value: $(System.DefaultWorkingDirectory)/$(gitops.repo)
  - name: ARGOCD_APPS_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml
  - name: ARGOCD_SERVICE_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml
  - name: ARGOCD_BOOTSTRAP_APPS_RBAC
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps
  - name: ARGOCD_BOOTSTRAP_NAMESPACE
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap
  - name: DEPLOY_BRANCH_NAME
    value: deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)
  - name: ARGOCD_SERVICE_FOLDER
    value: $(cluster.name)/$(cluster.namespace)
  - name: MANIFESTS_FOLDER
    value: $(cluster.name)/$(cluster.namespace)/$(service.identifier)
  - name: sourceCodeRepo
    value: $[ resources.repositories['srcDevRepo'].name ]
  - name: MANIFESTS_ARTIFACT_PATH
    value: $(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)
  - name: ARGOCD_NAMESPACE_FOLDER
    value: $(cluster.name)/argocd-$(argocd.context)
  - name: sub.channel
    value: stable
  - name: ip.approval
    value: Automatic
  - name: startingCSV
    value: cluster-observability-operator.v1.1.0
  jobs:
  - job: "Validate_variables"
    displayName: "Validate_variables"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      condition: false
      inputs:
        repository: none
    - task: CmdLine@2
      displayName: "View variables"
      inputs:
        script: "echo \"Parameters passed to pipeline:\"\necho '{\n  \"argocd\": {\n    \"k8sGitOpsArgoCD\": \"\",\n    \"k8s\": {\n      \"k8splatform\": \"ocp\",\n      \"environment\": \"Openshift Dev01\",\n      \"namespace\": \"openshift-cluster-observability-operator\",\n      \"serviceIdentifier\": \"cluster-observability-operator\"\n    },\n    \"argocd\": {\n      \"context\": \"infra\",\n      \"namespaceNodeSelect\": \"worker\",\n      \"syncInsecure\": \"True\",\n      \"syncPrune\": \"True\"\n    },\n    \"manifests\": {\n      \"path\": \"observability\"\n    },\n    \"customVarsTemplate\": \"vars.yaml\"\n  },\n  \"dockerContainerRegistry\": \"\",\n  \"dockerimage\": \"\",\n  \"validateVarsOnly\": \"False\",\n  \"appDynamics\": {},\n  \"multiParallelEnv\": \"True\",\n  \"stagename\": \"Openshift Dev01__openshift-cluster-observability-operator__cluster-observability-operator__\",\n  \"selfServicePipeline\": \"False\"\n}'\ncat <<'EOF'\nStage info: \n    name: $(System.StageName) \n    display: $(System.StageDisplayName) \n    attempt: $(System.StageAttempt)\nParameters/Variables defined or defaulted when calling k8sGitOpsArgoCD listed below:\n  k8s:\n    k8splatform: $(target.k8splatform)\n    ADO Environment: Openshift Dev01\n    ADO Variable Group: Openshift Dev01 - $(argocd.context)\n    project: $(occluster.project)\n    namespace: $(cluster.namespace)\n    serviceIdentifier: $(service.identifier)\n    image.identifier: $(image.identifier)\n    service.buidid: $(service.buildid)\n    argocd.identifier: $(argocd.identifier)\n    namespaceNodeSelect: $(ns.annotate.node.select)\n  argocd: \n    context: $(argocd.context)\n    syncStep: \n    syncTimeout: $(argocdSyncTimeout)\n    syncPrune: $(argocd.sync.prune)\n    syncInsecure: $(argocd.sync.insecure)\n    autoSyncPolicy: $(argocd.syncPolicy)\n    diffIgnore: $(ado.argocd.diffignore)\n    recurse: $(argocd.recurse)\n  manifests:\n    path: $(manifestspath)\n    replaceTokenPattern: $(tokenPattern)\n  customVarsTemplate: vars.yaml\nMisc ADO build vars:\n  semVersion: $(semVersion)\n  Build.BuildNumber: $(Build.BuildNumber)\nGitOps Directories involved in next steps:\n  MANIFEST_DIR: $(MANIFEST_DIR)\n  ARGOCD_APPS_MANIFEST: $(ARGOCD_APPS_MANIFEST)\n  ARGOCD_SERVICE_MANIFEST: $(ARGOCD_SERVICE_MANIFEST)\n  ARGOCD_BOOTSTRAP_APPS_RBAC: $(ARGOCD_BOOTSTRAP_APPS_RBAC)\n  ARGOCD_BOOTSTRAP_NAMESPACE: $(ARGOCD_BOOTSTRAP_NAMESPACE)\n  DEPLOY_BRANCH_NAME: $(DEPLOY_BRANCH_NAME)\n  ARGOCD_SERVICE_FOLDER: $(ARGOCD_SERVICE_FOLDER)\n  MANIFESTS_FOLDER: $(MANIFESTS_FOLDER)\n  MANIFESTS_ARTIFACT_PATH: $(MANIFESTS_ARTIFACT_PATH)\n  ARGOCD_NAMESPACE_FOLDER: $(ARGOCD_NAMESPACE_FOLDER)\nEOF\necho \"Variables passed in from App team var template:\"\necho '{\n  \"system\": \"build\",\n  \"system.hosttype\": \"build\",\n  \"system.servertype\": \"Hosted\",\n  \"system.culture\": \"en-US\",\n  \"system.collectionId\": \"a1d50930-84e6-45c1-8b89-a50cf285f127\",\n  \"system.collectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.teamFoundationCollectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.taskDefinitionsUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.pipelineStartTime\": \"2025-04-21 12:03:10-04:00\",\n  \"system.teamProject\": \"Default\",\n  \"system.teamProjectId\": \"61eb34c0-17a0-4875-b525-7a0b0072c15e\",\n  \"system.definitionId\": \"9071\",\n  \"build.definitionName\": \"ocp-cluster-observability-ado\",\n  \"build.repository.id\": \"facbd320-4176-47dc-a2e9-10270df8e4eb\",\n  \"build.repository.name\": \"ocp-cluster-observability\",\n  \"build.repository.uri\": \"https://dev.azure.com/bki-st/Default/_git/ocp-cluster-observability\",\n  \"build.definitionVersion\": \"4\",\n  \"USE_MSDEPLOY_TOKEN_AUTH\": \"true\",\n  \"DistributedTask.Agent.AddForceCredentialsToGitCheckout\": \"True\",\n  \"DistributedTask.Agent.AgentEnablePipelineArtifactLargeChunkSize\": \"True\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated\": \"False\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated246\": \"False\",\n  \"DistributedTask.Agent.CleanupPsModulesInPowershell\": \"False\",\n  \"DistributedTask.Agent.ContinueAfterCancelProcessTreeKillAttempt\": \"True\",\n  \"DistributedTask.Agent.DockerActionRetries\": \"True\",\n  \"DistributedTask.Agent.EnableAdditionalMaskingRegexes\": \"True\",\n  \"DistributedTask.Agent.EnableIssueSourceValidation\": \"True\",\n  \"DistributedTask.Agent.EnableResourceMonitorDebugOutput\": \"True\",\n  \"DistributedTask.Agent.EnableResourceUtilizationWarnings\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedBuildTask\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedTask\": \"True\",\n  \"DistributedTask.Agent.FailJobWhenAgentDies\": \"True\",\n  \"DistributedTask.Agent.FixPossibleGitOutOfMemoryProblem\": \"False\",\n  \"DistributedTask.Agent.ForceUpdateToLatest2Version\": \"False\",\n  \"DistributedTask.Agent.IgnoreVSTSTaskLib\": \"True\",\n  \"DistributedTask.Agent.LogTaskNameInUserAgent\": \"True\",\n  \"DistributedTask.Agent.LogToBlobstorageService\": \"True\",\n  \"DistributedTask.Agent.MountWorkspace\": \"True\",\n  \"DistributedTask.Agent.ReadOnlyVariables\": \"True\",\n  \"DistributedTask.Agent.Rosetta2Warning\": \"True\",\n  \"DistributedTask.Agent.UploadBuildArtifactsToBlob\": \"True\",\n  \"DistributedTask.Agent.UploadTimelineAttachmentsToBlob\": \"True\",\n  \"DistributedTask.Agent.UseDockerComposeV2CompatibleMode\": \"False\",\n  \"DistributedTask.Agent.UseFetchFilterInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseGitLongPaths\": \"True\",\n  \"DistributedTask.Agent.UseInteropToFindParentProcess\": \"True\",\n  \"DistributedTask.Agent.UseLatestGitVersion\": \"True\",\n  \"DistributedTask.Agent.UseMsalLibrary\": \"True\",\n  \"DistributedTask.Agent.USENEWNODEHANDLERTELEMETRY\": \"True\",\n  \"DistributedTask.Agent.UseNode20ToStartContainer\": \"True\",\n  \"DistributedTask.Agent.UseSparseCheckoutInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseWorkspaceId\": \"True\",\n  \"DistributedTask.Tasks.CopyFilesOverSSHV0UseQueue\": \"True\",\n  \"DistributedTask.Tasks.ModifyNumberOfRetriesInRobocopy\": \"True\",\n  \"DistributedTask.Tasks.Node.SkipDebugLogsWhenDebugModeOff\": \"True\",\n  \"DistributedTask.Tasks.RetireAzureRMPowerShellModule\": \"True\",\n  \"DistributedTask.Tasks.useJacocoTemplateV2forSingleModule\": \"True\",\n  \"DistributedTask.Tasks.UseLatestOpensslVersion\": \"True\",\n  \"build.definitionFolderPath\": \"\\\\ocp-native-ado\",\n  \"VSTSAGENT_CONTINUE_AFTER_CANCEL_PROCESSTREEKILL_ATTEMPT\": \"true\",\n  \"VSTSAGENT_DOCKER_ACTION_RETRIES\": \"true\",\n  \"USE_MSAL\": \"true\",\n  \"AZP_75787_ENABLE_COLLECT\": \"true\",\n  \"AZP_75787_ENABLE_NEW_PH_LOGIC\": \"true\",\n  \"AZP_AGENT_CHECK_FOR_TASK_DEPRECATION\": \"true\",\n  \"AZP_AGENT_MOUNT_WORKSPACE\": \"true\",\n  \"AZP_AGENT_IGNORE_VSTSTASKLIB\": \"true\",\n  \"AZP_PS_ENABLE_INVOKE_PROCESS\": \"true\",\n  \"FAIL_DEPRECATED_TASK\": \"true\",\n  \"AZP_AGENT_LOG_TASKNAME_IN_USERAGENT\": \"true\",\n  \"AGENT_USE_FETCH_FILTER_IN_CHECKOUT_TASK\": \"true\",\n  \"AGENT_USE_SPARSE_CHECKOUT_IN_CHECKOUT_TASK\": \"true\",\n  \"USE_OPENSSL_LATEST_VERSION\": \"true\",\n  \"MODIFY_NUMBER_OF_RETRIES_IN_ROBOCOPY\": \"true\",\n  \"AZP_75787_ENABLE_NEW_LOGIC\": \"false\",\n  \"AZP_75787_ENABLE_NEW_LOGIC_LOG\": \"false\",\n  \"AGENT_ENABLE_PIPELINEARTIFACT_LARGE_CHUNK_SIZE\": \"true\",\n  \"FAIL_JOB_WHEN_AGENT_DIES\": \"true\",\n  \"USE_LATEST_GIT_VERSION\": \"true\",\n  \"USE_GIT_LONG_PATHS\": \"true\",\n  \"ENABLE_ISSUE_SOURCE_VALIDATION\": \"true\",\n  \"RETIRE_AZURERM_POWERSHELL_MODULE\": \"true\",\n  \"AZP_ENABLE_RESOURCE_MONITOR_DEBUG_OUTPUT\": \"true\",\n  \"AZP_ENABLE_RESOURCE_UTILIZATION_WARNINGS\": \"true\",\n  \"FAIL_DEPRECATED_BUILD_TASK\": \"true\",\n  \"AZP_AGENT_USE_INTEROP_TO_FIND_PARENT_PROCESS\": \"true\",\n  \"ROSETTA2_WARNING\": \"true\",\n  \"COPYFILESOVERSSHV0_USE_QUEUE\": \"true\",\n  \"USE_FIXED_AZ_CONFIG_INIT\": \"true\",\n  \"USE_AKS_CREDENTIAL_API\": \"true\",\n  \"build.queuedBy\": \"Johnson, Rohan\",\n  \"build.queuedById\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedFor\": \"Johnson, Rohan\",\n  \"build.requestedForId\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedForEmail\": \"Rohan.Johnson@bkfs.com\",\n  \"build.sourceVersion\": \"5b7f7eab5db2124d93fc9dbb2a6724441802c2af\",\n  \"build.sourceBranch\": \"refs/heads/main\",\n  \"build.sourceBranchName\": \"main\",\n  \"build.reason\": \"Manual\",\n  \"system.pullRequest.isFork\": \"False\",\n  \"system.jobParallelismTag\": \"Private\",\n  \"system.enableAccessToken\": \"SecretVariable\",\n  \"target.k8splatform\": \"ocp\",\n  \"upperK8splatform\": \"OCP\",\n  \"occluster.project\": \"openshift-cluster-observability-operator\",\n  \"cluster.namespace\": \"openshift-cluster-observability-operator\",\n  \"service.identifier\": \"cluster-observability-operator\",\n  \"image.identifier\": \"$(image.repo)/:$(Build.BuildNumber)\",\n  \"service.buildid\": \"\\\"$(Build.BuildNumber)\\\"\",\n  \"service.buildidnoquotes\": \"$(Build.BuildNumber)\",\n  \"argocd.identifier\": \"$(service.identifier)\",\n  \"ns.annotate.node.select\": \" \",\n  \"cluster.gitops-name\": \"$(cluster.name)\",\n  \"argocd.context\": \"infra\",\n  \"argocdSyncTimeout\": \"600\",\n  \"argocd.sync.prune\": \"--prune\",\n  \"argocd.sync.insecure\": \"--insecure\",\n  \"argocd.syncPolicy\": \"{}\",\n  \"ado.argocd.diffignore\": \" \",\n  \"argocd.diffignore\": \" \",\n  \"argocd.service.labels\": \" \",\n  \"argocd.recurse\": \"directory:\\n      recurse: true\\n\",\n  \"helm.enabled\": \" \",\n  \"manifestspath\": \"observability\",\n  \"tokenPattern\": \"doublebraces\",\n  \"semVersion\": \"1.0\",\n  \"Build.BuildNumber\": \"$(semVersion)$(Rev:.r)\",\n  \"MANIFEST_DIR\": \"$(System.DefaultWorkingDirectory)/$(gitops.repo)\",\n  \"ARGOCD_APPS_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml\",\n  \"ARGOCD_SERVICE_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml\",\n  \"ARGOCD_BOOTSTRAP_APPS_RBAC\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps\",\n  \"ARGOCD_BOOTSTRAP_NAMESPACE\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap\",\n  \"DEPLOY_BRANCH_NAME\": \"deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)\",\n  \"ARGOCD_SERVICE_FOLDER\": \"$(cluster.name)/$(cluster.namespace)\",\n  \"MANIFESTS_FOLDER\": \"$(cluster.name)/$(cluster.namespace)/$(service.identifier)\",\n  \"sourceCodeRepo\": \"$[ resources.repositories['srcDevRepo'].name ]\",\n  \"MANIFESTS_ARTIFACT_PATH\": \"$(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)\",\n  \"ARGOCD_NAMESPACE_FOLDER\": \"$(cluster.name)/argocd-$(argocd.context)\",\n  \"sub.channel\": \"stable\",\n  \"ip.approval\": \"Automatic\",\n  \"startingCSV\": \"cluster-observability-operator.v1.1.0\"\n}' | sed '/ARGOCD_NAMESPACE_FOLDER/,$!d ; /ARGOCD_NAMESPACE_FOLDER/d ; /^}/d'\n"
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Validate variables"
      inputs:
        script: |
          if ! [[ "$(argocd.context)" =~ ^(apps|infra)$ ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.argocd.context must be \"apps\" or \"infra\"" ; exit 1 ; fi
          if ! [[ "$(target.k8splatform)" =~ ^(eks|ocp)$ ]] ; then echo "ERROR - variable k8splatform must be \"eks\" or \"ocp\"" ; exit 1 ; fi
          if [[ "$(manifestspath)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.manifests.path is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(occluster.project)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.k8s.namespace is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(service.identifier)" == "MISSING" ]] ; then echo "ERROR - parameters.argocd.k8s.serviceIdentifier is missing from your pipeline" ; exit 1 ; fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
  - job: "GitOps_Update_Source_of_Truth"
    displayName: "GitOps_Update_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - Validate_variables
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://Default/openshift-gitops-infra@master
        persistCredentials: true
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://bre/argocd@master
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: srcDevRepo
    - task: CmdLine@2
      displayName: "Prepare temporary location for raw ArgoCD manifests"
      inputs:
        script: |
          #echo "$(image)"
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)
          echo "System.DefaultWorkingDirectory = $(System.DefaultWorkingDirectory)"
          echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
          echo "Build.DefinitionName = $(Build.DefinitionName)"
          #echo "tree Build.SourcesDirectory"
          #tree $(Build.SourcesDirectory)
          #echo "tree Pipeline.Workspace"
          #tree $(Pipeline.Workspace)/
          #echo "tree DEPLOY_BRANCH_NAME"
          #tree $(DEPLOY_BRANCH_NAME)/
          #tree $(Pipeline.Workspace)
          echo "Copy ArgoCD Namespace Application template to GitOps repo directory"
          cp $(ARGOCD_APPS_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml
          echo "Copy ArgoCD Service Application template to GitOps repo directory"
          cp $(ARGOCD_SERVICE_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
          echo "Copy ArgoCD Bootstrap Namespace template(s) to GitOps repo directory"
          cp $(ARGOCD_BOOTSTRAP_NAMESPACE)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          if [[ "$(argocd.context)" == "apps" && "$(target.k8splatform)" == "ocp" ]] || [[ "$(target.k8splatform)" == "eks" ]]  ; then
            echo "Copy ArgoCD Namespace RBAC template(s) to GitOps repo directory"
            cp $(ARGOCD_BOOTSTRAP_APPS_RBAC)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Configure Git"
      env:
        USER_NAME: "Git-Ops"
        USER_EMAIL: "<>"
      retryCountOnTaskFailure: 2
      inputs:
        script: |
          echo "User: $USER_NAME"
          echo "User email: $USER_EMAIL"
          git config user.email $USER_EMAIL & git config user.name $USER_NAME
        failOnStderr: true
        workingDirectory: $(MANIFEST_DIR)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for ArgoCD Applications and Bootstrap files"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: Prepare temporary location for raw app/infra manifests
      inputs:
        script: |
          echo "$(MANIFESTS_ARTIFACT_PATH)"
          ls -la $(MANIFESTS_ARTIFACT_PATH)
          echo "$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/"
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/

          echo "Copy k8s manifests for $(argocd.identifier) and stage them into GitOps repo directory"
          cp -r $(MANIFESTS_ARTIFACT_PATH)/* $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for bk app/infra manifests"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: '$(tokenPattern)'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: "Purge lines containing only whitespaces in argocd app manifests"
      inputs:
        script: |
          sed -i '/^[[:space:]]*$/d' $(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)
    - task: CmdLine@2
      displayName: "Add Generated Manifest to New Branch"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo \"Create a new branch$(DEPLOY_BRANCH_NAME)\"\ngit checkout -b $(DEPLOY_BRANCH_NAME)\nmkdir -p $(ARGOCD_NAMESPACE_FOLDER)\nmkdir -p $(MANIFESTS_FOLDER)\ncp $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_NAMESPACE_FOLDER)/\nls -l $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/\nls -l $(ARGOCD_SERVICE_FOLDER)/\ncp -r $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/* $(ARGOCD_SERVICE_FOLDER)/\nrsync --delete -rv $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/ $(MANIFESTS_FOLDER)/\ngit add -A 2>&1\necho 'git commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v'\ngit commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v 2>&1\n# echo 'git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v'\n# git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \ngit push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\necho \"done with initial push\"\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
    - task: CmdLine@2
      displayName: "Merge PR for GitOps repo"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
        displayName: "Create and complete Pull Request in GitOps repo"
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo $(System.AccessToken) | az devops login\naz devops configure --defaults organization=https://dev.azure.com/bki-st project=\"Default\" --use-git-aliases true\necho \"Create PR for branch $(DEPLOY_BRANCH_NAME)\"\nPR_ID=\"\"\naz repos pr create --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) --title \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\" --squash | jq '.pullRequestId' > $(Agent.TempDirectory)/PR_ID\nexport PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\necho \"PRID: $PR_ID\"\nif [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n  #az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME)\n  az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) | jq '.[] | .pullRequestId' > $(Agent.TempDirectory)/PR_ID\n  export PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\n  echo \"PRID: $PR_ID\"\n  if [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n    echo \"ERROR: could not get a PR_ID\"\n    exit 1\n  fi\nfi\n###########################\nPR_STATUS=\"\"\nif [[ $(System.debug) == 'True' ]]; then\n  echo\n  echo\n  echo \"PR_DEBUG:\"\n  echo\n  az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus'\n  echo\n  echo\nfi\nPR_TRIES=\"1 2 3 4 5\"\nfor PR_TRY in PR_TRIES\ndo\n  PR_STATUS=$(az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus')\n  if [[ \"$PR_STATUS\" == \"succeeded\" ]]; then\n    break\n  elif [[ \"$PR_STATUS\" == \"conflicts\" ]]; then\n    echo \"MERGE Confilct detected .. merge not complete\"\n    echo \"MERGE Status: $PR_STATUS\"\n\n    # ########## New Code\n    # Generate a random number between 1 and 10\n    RANDOM_WAIT=$(( ( RANDOM % 10 ) + 1 ))\n\n    # Wait for the random number of seconds\n    echo \"Waiting for $RANDOM_WAIT seconds...\"\n    sleep $RANDOM_WAIT\n\n    echo \"Checking git remote origin\"\n    git config --get-all remote.origin.fetch\n\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    echo \"Fetching latest changes from master branch\"\n    git fetch origin master\n\n    echo \"Switching to trunk\"\n    git checkout master\n\n    echo \"Pulling latest changes from remote\"\n    git pull\n\n    echo \"Switching back to $(DEPLOY_BRANCH_NAME)\"\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    # This pull was extremely helpful in understanding the underlying problem.\n    # echo \"Pulling latest changes from master branch\"\n    # git pull https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) master\n\n    echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    git merge origin/master -X ours --no-edit\n\n    #Check if the merge was successful\n    if [ $? -ne 0 ]; then\n      echo \"Merge conflicts detected. Listing conflicted files:\"\n      git diff --name-only --diff-filter=U\n    else\n      echo \"No conflicts detected.\"\n    fi\n\n    echo \"checking git status\"\n    git status\n\n    echo \"Pushing git change\"\n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n\n    echo \"checking git status\"\n    git status\n    \n\n    # echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    # git merge origin/master -X ours --no-edit\n\n    # # Check if the merge was successful\n    # if [ $? -ne 0 ]; then\n    #   CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)\n    #   echo \"Conflicted files: $CONFLICTED_FILES\"\n    #   # Resolve conflicts by preferring changes from the current branch\n    #   for FILE in $CONFLICTED_FILES; do\n    #     git checkout --ours $FILE\n    #     git add $FILE\n    #   done\n\n      # Commit the resolved conflicts\n      git commit -m \"Resolved merge conflicts by preferring current branch changes\"\n\n    # fi\n\n    echo \"Pushing merged changes into $(DEPLOY_BRANCH_NAME)\"\n    # git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n    # ## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n    echo \"done\"\n    # ########## End New Code\n\n    echo \"Resolve conflict at this URL: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\n    exit 1\n  else\n    echo \"PR_STATUS = $PR_STATUS\"\n  fi\n  sleep 1\ndone\nif [[ \"$PR_STATUS\" != \"succeeded\" ]]; then\n  echo \"Pull Request did NOT complete in 5sec .. PR not completed\"\n  echo \"Pull Request Status: $PR_STATUS\"\n  exit 1\nfi\n################################\necho \"Completing PR: deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\"\naz repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\"\n################################\nattempts=3\n## Trying to complete the PR 3 times\nwhile : ; do\n  az repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\" | jq --unbuffered '.closedBy' > closed_by_file\n  export CLOSED_BY=`cat closed_by_file`\n  echo \"PR closed by: $CLOSED_BY\"\n  if [[ $CLOSED_BY == 'null' ]]; then\n    sleep 1\n  else\n    ## Ensure that source branch is deleted\n    cd $(MANIFEST_DIR)\n    git push origin --delete $(DEPLOY_BRANCH_NAME)\n    break\n  fi\n  ((attempts--))\n  [[ $attempts > 0 ]] || break\ndone\n## If the PR has not been completed, forcing a pipeline failure\nif [[ $CLOSED_BY == 'null' ]]; then\n  echo \"##vso[task.logissue type=error]The gitops workflow was not able to complete the automated PR for for $(service.identifier) service in $(cluster.name) cluster.\"\n  exit 1\nelse\n  echo \"##[debug]Gitops PR for $(service.identifier) service in $(cluster.name) cluster completed: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\nfi\n##############################\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
  - deployment: "ArgoCD_Sync_Source_of_Truth"
    displayName: "ArgoCD_Sync_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - GitOps_Update_Source_of_Truth
    environment:
      name: Openshift Dev01
    pool:
      name: ST-AgentPool
      demands:
      - Agent.OS -equals Linux
    container:
      image: enterpriseartifactory.bkfs.com:5000/bre/containers/bre_ubi8_oc:latest
      options: --entrypoint=""
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            condition: false
            inputs:
              alias: none
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 1: $(argocd.context) > $(cluster.namespace)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# Show ArgoCD version\n  argocd version $(argocd.sync.insecure)\n# ArgoCD sync phase 1 - best effort to reach service.identifer sync:\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing root ado-$(argocd.context)'s Applications - specifically Namespace $(cluster.namespace) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(cluster.namespace) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait ado-$(argocd.context) --sync --resource argoproj.io:Application:$(cluster.namespace) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait ado-$(argocd.context) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync ado-$(argocd.context) $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true\n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait ado-$(argocd.context) --sync --operation $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 2: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# ArgoCD sync phase 2 - best effort to run Project bootstrap PreSync Hook Job and sync service.identifer(s):\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing/Running ArgoCD Namespace bootstrap Job - to create k8s Namespace $(cluster.namespace) and sync all leaf Service Applications - including $(argocd.identifier) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(argocd.identifier) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait $(cluster.namespace) --sync --resource argoproj.io:Application:$(argocd.identifier) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    if argocd app get $(cluster.namespace) $(argocd.sync.insecure) | grep rbac.authorization | grep OutOfSync\n    then\n      notsync=$((notsync+1))\n    fi\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait $(cluster.namespace) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync $(cluster.namespace) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait $(cluster.namespace) --sync --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 3: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) > $(service.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: |
                # ArgoCD sync phase 3 - wait for everything, including health:
                  date
                  try_fail="1 2 3 4 5"
                  for fail in try_fail;
                  do
                      echo "PipeStatus: ${PIPESTATUS[@]}"
                      echo -e "\n\n\n############# Syncing all k8s manifests under leaf Service Application $(argocd.identifier) #############"
                      echo "Performing sync..."
                      argocd app sync $(argocd.identifier) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi
                      echo "Post argocd app wait for active/pending --sync & --health status"
                      argocd app wait $(argocd.identifier) $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result; if [[ $(cat result) -ne 0 ]];then sleep 1;fi
                  done
                  date
- stage: OpenshiftjPerf01__openshift_cluster_observability_operator__cluster_observability_operator__
  displayName: Openshift jPerf01 - cluster-observability-operator
  pool:
    vmImage: ubuntu-latest
  variables:
  - name: target.k8splatform
    value: ocp
  - name: upperK8splatform
    value: OCP
  - group: Openshift jPerf01 - infra
  - name: occluster.project
    value: openshift-cluster-observability-operator
  - name: cluster.namespace
    value: openshift-cluster-observability-operator
  - name: service.identifier
    value: cluster-observability-operator
  - name: image.identifier
    value: $(image.repo)/:$(Build.BuildNumber)
  - name: service.buildid
    value: '"$(Build.BuildNumber)"'
  - name: service.buildidnoquotes
    value: '$(Build.BuildNumber)'
  - name: argocd.identifier
    value: $(service.identifier)
  - name: ns.annotate.node.select
    value: ' '
  - name: cluster.gitops-name
    value: $(cluster.name)
  - name: argocd.context
    value: infra
  - name: argocdSyncTimeout
    value: '600'
  - name: argocd.sync.prune
    value: '--prune'
  - name: argocd.sync.insecure
    value: '--insecure'
  - name: argocd.syncPolicy
    value: '{}'
  - name: ado.argocd.diffignore
    value: ' '
  - name: argocd.diffignore
    value: ' '
  - name: argocd.service.labels
    value: ' '
  - name: argocd.recurse
    value: |
      directory:
            recurse: true
  - name: helm.enabled
    value: ' '
  - name: manifestspath
    value: observability
  - name: tokenPattern
    value: 'doublebraces'
  - name: semVersion
    value: 1.0
  - name: Build.BuildNumber
    value: $(semVersion)$(Rev:.r)
  - name: MANIFEST_DIR
    value: $(System.DefaultWorkingDirectory)/$(gitops.repo)
  - name: ARGOCD_APPS_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml
  - name: ARGOCD_SERVICE_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml
  - name: ARGOCD_BOOTSTRAP_APPS_RBAC
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps
  - name: ARGOCD_BOOTSTRAP_NAMESPACE
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap
  - name: DEPLOY_BRANCH_NAME
    value: deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)
  - name: ARGOCD_SERVICE_FOLDER
    value: $(cluster.name)/$(cluster.namespace)
  - name: MANIFESTS_FOLDER
    value: $(cluster.name)/$(cluster.namespace)/$(service.identifier)
  - name: sourceCodeRepo
    value: $[ resources.repositories['srcDevRepo'].name ]
  - name: MANIFESTS_ARTIFACT_PATH
    value: $(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)
  - name: ARGOCD_NAMESPACE_FOLDER
    value: $(cluster.name)/argocd-$(argocd.context)
  - name: sub.channel
    value: stable
  - name: ip.approval
    value: Automatic
  - name: startingCSV
    value: cluster-observability-operator.v1.1.0
  jobs:
  - job: "Validate_variables"
    displayName: "Validate_variables"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      condition: false
      inputs:
        repository: none
    - task: CmdLine@2
      displayName: "View variables"
      inputs:
        script: "echo \"Parameters passed to pipeline:\"\necho '{\n  \"argocd\": {\n    \"k8sGitOpsArgoCD\": \"\",\n    \"k8s\": {\n      \"k8splatform\": \"ocp\",\n      \"environment\": \"Openshift jPerf01\",\n      \"namespace\": \"openshift-cluster-observability-operator\",\n      \"serviceIdentifier\": \"cluster-observability-operator\"\n    },\n    \"argocd\": {\n      \"context\": \"infra\",\n      \"namespaceNodeSelect\": \"worker\",\n      \"syncInsecure\": \"True\",\n      \"syncPrune\": \"True\"\n    },\n    \"manifests\": {\n      \"path\": \"observability\"\n    },\n    \"customVarsTemplate\": \"vars.yaml\"\n  },\n  \"dockerContainerRegistry\": \"\",\n  \"dockerimage\": \"\",\n  \"validateVarsOnly\": \"False\",\n  \"appDynamics\": {},\n  \"multiParallelEnv\": \"True\",\n  \"stagename\": \"Openshift jPerf01__openshift-cluster-observability-operator__cluster-observability-operator__\",\n  \"selfServicePipeline\": \"False\"\n}'\ncat <<'EOF'\nStage info: \n    name: $(System.StageName) \n    display: $(System.StageDisplayName) \n    attempt: $(System.StageAttempt)\nParameters/Variables defined or defaulted when calling k8sGitOpsArgoCD listed below:\n  k8s:\n    k8splatform: $(target.k8splatform)\n    ADO Environment: Openshift jPerf01\n    ADO Variable Group: Openshift jPerf01 - $(argocd.context)\n    project: $(occluster.project)\n    namespace: $(cluster.namespace)\n    serviceIdentifier: $(service.identifier)\n    image.identifier: $(image.identifier)\n    service.buidid: $(service.buildid)\n    argocd.identifier: $(argocd.identifier)\n    namespaceNodeSelect: $(ns.annotate.node.select)\n  argocd: \n    context: $(argocd.context)\n    syncStep: \n    syncTimeout: $(argocdSyncTimeout)\n    syncPrune: $(argocd.sync.prune)\n    syncInsecure: $(argocd.sync.insecure)\n    autoSyncPolicy: $(argocd.syncPolicy)\n    diffIgnore: $(ado.argocd.diffignore)\n    recurse: $(argocd.recurse)\n  manifests:\n    path: $(manifestspath)\n    replaceTokenPattern: $(tokenPattern)\n  customVarsTemplate: vars.yaml\nMisc ADO build vars:\n  semVersion: $(semVersion)\n  Build.BuildNumber: $(Build.BuildNumber)\nGitOps Directories involved in next steps:\n  MANIFEST_DIR: $(MANIFEST_DIR)\n  ARGOCD_APPS_MANIFEST: $(ARGOCD_APPS_MANIFEST)\n  ARGOCD_SERVICE_MANIFEST: $(ARGOCD_SERVICE_MANIFEST)\n  ARGOCD_BOOTSTRAP_APPS_RBAC: $(ARGOCD_BOOTSTRAP_APPS_RBAC)\n  ARGOCD_BOOTSTRAP_NAMESPACE: $(ARGOCD_BOOTSTRAP_NAMESPACE)\n  DEPLOY_BRANCH_NAME: $(DEPLOY_BRANCH_NAME)\n  ARGOCD_SERVICE_FOLDER: $(ARGOCD_SERVICE_FOLDER)\n  MANIFESTS_FOLDER: $(MANIFESTS_FOLDER)\n  MANIFESTS_ARTIFACT_PATH: $(MANIFESTS_ARTIFACT_PATH)\n  ARGOCD_NAMESPACE_FOLDER: $(ARGOCD_NAMESPACE_FOLDER)\nEOF\necho \"Variables passed in from App team var template:\"\necho '{\n  \"system\": \"build\",\n  \"system.hosttype\": \"build\",\n  \"system.servertype\": \"Hosted\",\n  \"system.culture\": \"en-US\",\n  \"system.collectionId\": \"a1d50930-84e6-45c1-8b89-a50cf285f127\",\n  \"system.collectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.teamFoundationCollectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.taskDefinitionsUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.pipelineStartTime\": \"2025-04-21 12:03:10-04:00\",\n  \"system.teamProject\": \"Default\",\n  \"system.teamProjectId\": \"61eb34c0-17a0-4875-b525-7a0b0072c15e\",\n  \"system.definitionId\": \"9071\",\n  \"build.definitionName\": \"ocp-cluster-observability-ado\",\n  \"build.repository.id\": \"facbd320-4176-47dc-a2e9-10270df8e4eb\",\n  \"build.repository.name\": \"ocp-cluster-observability\",\n  \"build.repository.uri\": \"https://dev.azure.com/bki-st/Default/_git/ocp-cluster-observability\",\n  \"build.definitionVersion\": \"4\",\n  \"USE_MSDEPLOY_TOKEN_AUTH\": \"true\",\n  \"DistributedTask.Agent.AddForceCredentialsToGitCheckout\": \"True\",\n  \"DistributedTask.Agent.AgentEnablePipelineArtifactLargeChunkSize\": \"True\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated\": \"False\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated246\": \"False\",\n  \"DistributedTask.Agent.CleanupPsModulesInPowershell\": \"False\",\n  \"DistributedTask.Agent.ContinueAfterCancelProcessTreeKillAttempt\": \"True\",\n  \"DistributedTask.Agent.DockerActionRetries\": \"True\",\n  \"DistributedTask.Agent.EnableAdditionalMaskingRegexes\": \"True\",\n  \"DistributedTask.Agent.EnableIssueSourceValidation\": \"True\",\n  \"DistributedTask.Agent.EnableResourceMonitorDebugOutput\": \"True\",\n  \"DistributedTask.Agent.EnableResourceUtilizationWarnings\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedBuildTask\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedTask\": \"True\",\n  \"DistributedTask.Agent.FailJobWhenAgentDies\": \"True\",\n  \"DistributedTask.Agent.FixPossibleGitOutOfMemoryProblem\": \"False\",\n  \"DistributedTask.Agent.ForceUpdateToLatest2Version\": \"False\",\n  \"DistributedTask.Agent.IgnoreVSTSTaskLib\": \"True\",\n  \"DistributedTask.Agent.LogTaskNameInUserAgent\": \"True\",\n  \"DistributedTask.Agent.LogToBlobstorageService\": \"True\",\n  \"DistributedTask.Agent.MountWorkspace\": \"True\",\n  \"DistributedTask.Agent.ReadOnlyVariables\": \"True\",\n  \"DistributedTask.Agent.Rosetta2Warning\": \"True\",\n  \"DistributedTask.Agent.UploadBuildArtifactsToBlob\": \"True\",\n  \"DistributedTask.Agent.UploadTimelineAttachmentsToBlob\": \"True\",\n  \"DistributedTask.Agent.UseDockerComposeV2CompatibleMode\": \"False\",\n  \"DistributedTask.Agent.UseFetchFilterInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseGitLongPaths\": \"True\",\n  \"DistributedTask.Agent.UseInteropToFindParentProcess\": \"True\",\n  \"DistributedTask.Agent.UseLatestGitVersion\": \"True\",\n  \"DistributedTask.Agent.UseMsalLibrary\": \"True\",\n  \"DistributedTask.Agent.USENEWNODEHANDLERTELEMETRY\": \"True\",\n  \"DistributedTask.Agent.UseNode20ToStartContainer\": \"True\",\n  \"DistributedTask.Agent.UseSparseCheckoutInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseWorkspaceId\": \"True\",\n  \"DistributedTask.Tasks.CopyFilesOverSSHV0UseQueue\": \"True\",\n  \"DistributedTask.Tasks.ModifyNumberOfRetriesInRobocopy\": \"True\",\n  \"DistributedTask.Tasks.Node.SkipDebugLogsWhenDebugModeOff\": \"True\",\n  \"DistributedTask.Tasks.RetireAzureRMPowerShellModule\": \"True\",\n  \"DistributedTask.Tasks.useJacocoTemplateV2forSingleModule\": \"True\",\n  \"DistributedTask.Tasks.UseLatestOpensslVersion\": \"True\",\n  \"build.definitionFolderPath\": \"\\\\ocp-native-ado\",\n  \"VSTSAGENT_CONTINUE_AFTER_CANCEL_PROCESSTREEKILL_ATTEMPT\": \"true\",\n  \"VSTSAGENT_DOCKER_ACTION_RETRIES\": \"true\",\n  \"USE_MSAL\": \"true\",\n  \"AZP_75787_ENABLE_COLLECT\": \"true\",\n  \"AZP_75787_ENABLE_NEW_PH_LOGIC\": \"true\",\n  \"AZP_AGENT_CHECK_FOR_TASK_DEPRECATION\": \"true\",\n  \"AZP_AGENT_MOUNT_WORKSPACE\": \"true\",\n  \"AZP_AGENT_IGNORE_VSTSTASKLIB\": \"true\",\n  \"AZP_PS_ENABLE_INVOKE_PROCESS\": \"true\",\n  \"FAIL_DEPRECATED_TASK\": \"true\",\n  \"AZP_AGENT_LOG_TASKNAME_IN_USERAGENT\": \"true\",\n  \"AGENT_USE_FETCH_FILTER_IN_CHECKOUT_TASK\": \"true\",\n  \"AGENT_USE_SPARSE_CHECKOUT_IN_CHECKOUT_TASK\": \"true\",\n  \"USE_OPENSSL_LATEST_VERSION\": \"true\",\n  \"MODIFY_NUMBER_OF_RETRIES_IN_ROBOCOPY\": \"true\",\n  \"AZP_75787_ENABLE_NEW_LOGIC\": \"false\",\n  \"AZP_75787_ENABLE_NEW_LOGIC_LOG\": \"false\",\n  \"AGENT_ENABLE_PIPELINEARTIFACT_LARGE_CHUNK_SIZE\": \"true\",\n  \"FAIL_JOB_WHEN_AGENT_DIES\": \"true\",\n  \"USE_LATEST_GIT_VERSION\": \"true\",\n  \"USE_GIT_LONG_PATHS\": \"true\",\n  \"ENABLE_ISSUE_SOURCE_VALIDATION\": \"true\",\n  \"RETIRE_AZURERM_POWERSHELL_MODULE\": \"true\",\n  \"AZP_ENABLE_RESOURCE_MONITOR_DEBUG_OUTPUT\": \"true\",\n  \"AZP_ENABLE_RESOURCE_UTILIZATION_WARNINGS\": \"true\",\n  \"FAIL_DEPRECATED_BUILD_TASK\": \"true\",\n  \"AZP_AGENT_USE_INTEROP_TO_FIND_PARENT_PROCESS\": \"true\",\n  \"ROSETTA2_WARNING\": \"true\",\n  \"COPYFILESOVERSSHV0_USE_QUEUE\": \"true\",\n  \"USE_FIXED_AZ_CONFIG_INIT\": \"true\",\n  \"USE_AKS_CREDENTIAL_API\": \"true\",\n  \"build.queuedBy\": \"Johnson, Rohan\",\n  \"build.queuedById\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedFor\": \"Johnson, Rohan\",\n  \"build.requestedForId\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedForEmail\": \"Rohan.Johnson@bkfs.com\",\n  \"build.sourceVersion\": \"5b7f7eab5db2124d93fc9dbb2a6724441802c2af\",\n  \"build.sourceBranch\": \"refs/heads/main\",\n  \"build.sourceBranchName\": \"main\",\n  \"build.reason\": \"Manual\",\n  \"system.pullRequest.isFork\": \"False\",\n  \"system.jobParallelismTag\": \"Private\",\n  \"system.enableAccessToken\": \"SecretVariable\",\n  \"target.k8splatform\": \"ocp\",\n  \"upperK8splatform\": \"OCP\",\n  \"occluster.project\": \"openshift-cluster-observability-operator\",\n  \"cluster.namespace\": \"openshift-cluster-observability-operator\",\n  \"service.identifier\": \"cluster-observability-operator\",\n  \"image.identifier\": \"$(image.repo)/:$(Build.BuildNumber)\",\n  \"service.buildid\": \"\\\"$(Build.BuildNumber)\\\"\",\n  \"service.buildidnoquotes\": \"$(Build.BuildNumber)\",\n  \"argocd.identifier\": \"$(service.identifier)\",\n  \"ns.annotate.node.select\": \" \",\n  \"cluster.gitops-name\": \"$(cluster.name)\",\n  \"argocd.context\": \"infra\",\n  \"argocdSyncTimeout\": \"600\",\n  \"argocd.sync.prune\": \"--prune\",\n  \"argocd.sync.insecure\": \"--insecure\",\n  \"argocd.syncPolicy\": \"{}\",\n  \"ado.argocd.diffignore\": \" \",\n  \"argocd.diffignore\": \" \",\n  \"argocd.service.labels\": \" \",\n  \"argocd.recurse\": \"directory:\\n      recurse: true\\n\",\n  \"helm.enabled\": \" \",\n  \"manifestspath\": \"observability\",\n  \"tokenPattern\": \"doublebraces\",\n  \"semVersion\": \"1.0\",\n  \"Build.BuildNumber\": \"$(semVersion)$(Rev:.r)\",\n  \"MANIFEST_DIR\": \"$(System.DefaultWorkingDirectory)/$(gitops.repo)\",\n  \"ARGOCD_APPS_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml\",\n  \"ARGOCD_SERVICE_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml\",\n  \"ARGOCD_BOOTSTRAP_APPS_RBAC\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps\",\n  \"ARGOCD_BOOTSTRAP_NAMESPACE\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap\",\n  \"DEPLOY_BRANCH_NAME\": \"deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)\",\n  \"ARGOCD_SERVICE_FOLDER\": \"$(cluster.name)/$(cluster.namespace)\",\n  \"MANIFESTS_FOLDER\": \"$(cluster.name)/$(cluster.namespace)/$(service.identifier)\",\n  \"sourceCodeRepo\": \"$[ resources.repositories['srcDevRepo'].name ]\",\n  \"MANIFESTS_ARTIFACT_PATH\": \"$(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)\",\n  \"ARGOCD_NAMESPACE_FOLDER\": \"$(cluster.name)/argocd-$(argocd.context)\",\n  \"sub.channel\": \"stable\",\n  \"ip.approval\": \"Automatic\",\n  \"startingCSV\": \"cluster-observability-operator.v1.1.0\"\n}' | sed '/ARGOCD_NAMESPACE_FOLDER/,$!d ; /ARGOCD_NAMESPACE_FOLDER/d ; /^}/d'\n"
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Validate variables"
      inputs:
        script: |
          if ! [[ "$(argocd.context)" =~ ^(apps|infra)$ ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.argocd.context must be \"apps\" or \"infra\"" ; exit 1 ; fi
          if ! [[ "$(target.k8splatform)" =~ ^(eks|ocp)$ ]] ; then echo "ERROR - variable k8splatform must be \"eks\" or \"ocp\"" ; exit 1 ; fi
          if [[ "$(manifestspath)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.manifests.path is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(occluster.project)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.k8s.namespace is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(service.identifier)" == "MISSING" ]] ; then echo "ERROR - parameters.argocd.k8s.serviceIdentifier is missing from your pipeline" ; exit 1 ; fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
  - job: "GitOps_Update_Source_of_Truth"
    displayName: "GitOps_Update_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - Validate_variables
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://Default/openshift-gitops-infra@master
        persistCredentials: true
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://bre/argocd@master
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: srcDevRepo
    - task: CmdLine@2
      displayName: "Prepare temporary location for raw ArgoCD manifests"
      inputs:
        script: |
          #echo "$(image)"
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)
          echo "System.DefaultWorkingDirectory = $(System.DefaultWorkingDirectory)"
          echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
          echo "Build.DefinitionName = $(Build.DefinitionName)"
          #echo "tree Build.SourcesDirectory"
          #tree $(Build.SourcesDirectory)
          #echo "tree Pipeline.Workspace"
          #tree $(Pipeline.Workspace)/
          #echo "tree DEPLOY_BRANCH_NAME"
          #tree $(DEPLOY_BRANCH_NAME)/
          #tree $(Pipeline.Workspace)
          echo "Copy ArgoCD Namespace Application template to GitOps repo directory"
          cp $(ARGOCD_APPS_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml
          echo "Copy ArgoCD Service Application template to GitOps repo directory"
          cp $(ARGOCD_SERVICE_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
          echo "Copy ArgoCD Bootstrap Namespace template(s) to GitOps repo directory"
          cp $(ARGOCD_BOOTSTRAP_NAMESPACE)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          if [[ "$(argocd.context)" == "apps" && "$(target.k8splatform)" == "ocp" ]] || [[ "$(target.k8splatform)" == "eks" ]]  ; then
            echo "Copy ArgoCD Namespace RBAC template(s) to GitOps repo directory"
            cp $(ARGOCD_BOOTSTRAP_APPS_RBAC)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Configure Git"
      env:
        USER_NAME: "Git-Ops"
        USER_EMAIL: "<>"
      retryCountOnTaskFailure: 2
      inputs:
        script: |
          echo "User: $USER_NAME"
          echo "User email: $USER_EMAIL"
          git config user.email $USER_EMAIL & git config user.name $USER_NAME
        failOnStderr: true
        workingDirectory: $(MANIFEST_DIR)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for ArgoCD Applications and Bootstrap files"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: Prepare temporary location for raw app/infra manifests
      inputs:
        script: |
          echo "$(MANIFESTS_ARTIFACT_PATH)"
          ls -la $(MANIFESTS_ARTIFACT_PATH)
          echo "$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/"
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/

          echo "Copy k8s manifests for $(argocd.identifier) and stage them into GitOps repo directory"
          cp -r $(MANIFESTS_ARTIFACT_PATH)/* $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for bk app/infra manifests"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: '$(tokenPattern)'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: "Purge lines containing only whitespaces in argocd app manifests"
      inputs:
        script: |
          sed -i '/^[[:space:]]*$/d' $(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)
    - task: CmdLine@2
      displayName: "Add Generated Manifest to New Branch"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo \"Create a new branch$(DEPLOY_BRANCH_NAME)\"\ngit checkout -b $(DEPLOY_BRANCH_NAME)\nmkdir -p $(ARGOCD_NAMESPACE_FOLDER)\nmkdir -p $(MANIFESTS_FOLDER)\ncp $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_NAMESPACE_FOLDER)/\nls -l $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/\nls -l $(ARGOCD_SERVICE_FOLDER)/\ncp -r $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/* $(ARGOCD_SERVICE_FOLDER)/\nrsync --delete -rv $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/ $(MANIFESTS_FOLDER)/\ngit add -A 2>&1\necho 'git commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v'\ngit commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v 2>&1\n# echo 'git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v'\n# git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \ngit push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\necho \"done with initial push\"\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
    - task: CmdLine@2
      displayName: "Merge PR for GitOps repo"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
        displayName: "Create and complete Pull Request in GitOps repo"
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo $(System.AccessToken) | az devops login\naz devops configure --defaults organization=https://dev.azure.com/bki-st project=\"Default\" --use-git-aliases true\necho \"Create PR for branch $(DEPLOY_BRANCH_NAME)\"\nPR_ID=\"\"\naz repos pr create --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) --title \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\" --squash | jq '.pullRequestId' > $(Agent.TempDirectory)/PR_ID\nexport PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\necho \"PRID: $PR_ID\"\nif [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n  #az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME)\n  az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) | jq '.[] | .pullRequestId' > $(Agent.TempDirectory)/PR_ID\n  export PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\n  echo \"PRID: $PR_ID\"\n  if [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n    echo \"ERROR: could not get a PR_ID\"\n    exit 1\n  fi\nfi\n###########################\nPR_STATUS=\"\"\nif [[ $(System.debug) == 'True' ]]; then\n  echo\n  echo\n  echo \"PR_DEBUG:\"\n  echo\n  az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus'\n  echo\n  echo\nfi\nPR_TRIES=\"1 2 3 4 5\"\nfor PR_TRY in PR_TRIES\ndo\n  PR_STATUS=$(az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus')\n  if [[ \"$PR_STATUS\" == \"succeeded\" ]]; then\n    break\n  elif [[ \"$PR_STATUS\" == \"conflicts\" ]]; then\n    echo \"MERGE Confilct detected .. merge not complete\"\n    echo \"MERGE Status: $PR_STATUS\"\n\n    # ########## New Code\n    # Generate a random number between 1 and 10\n    RANDOM_WAIT=$(( ( RANDOM % 10 ) + 1 ))\n\n    # Wait for the random number of seconds\n    echo \"Waiting for $RANDOM_WAIT seconds...\"\n    sleep $RANDOM_WAIT\n\n    echo \"Checking git remote origin\"\n    git config --get-all remote.origin.fetch\n\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    echo \"Fetching latest changes from master branch\"\n    git fetch origin master\n\n    echo \"Switching to trunk\"\n    git checkout master\n\n    echo \"Pulling latest changes from remote\"\n    git pull\n\n    echo \"Switching back to $(DEPLOY_BRANCH_NAME)\"\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    # This pull was extremely helpful in understanding the underlying problem.\n    # echo \"Pulling latest changes from master branch\"\n    # git pull https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) master\n\n    echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    git merge origin/master -X ours --no-edit\n\n    #Check if the merge was successful\n    if [ $? -ne 0 ]; then\n      echo \"Merge conflicts detected. Listing conflicted files:\"\n      git diff --name-only --diff-filter=U\n    else\n      echo \"No conflicts detected.\"\n    fi\n\n    echo \"checking git status\"\n    git status\n\n    echo \"Pushing git change\"\n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n\n    echo \"checking git status\"\n    git status\n    \n\n    # echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    # git merge origin/master -X ours --no-edit\n\n    # # Check if the merge was successful\n    # if [ $? -ne 0 ]; then\n    #   CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)\n    #   echo \"Conflicted files: $CONFLICTED_FILES\"\n    #   # Resolve conflicts by preferring changes from the current branch\n    #   for FILE in $CONFLICTED_FILES; do\n    #     git checkout --ours $FILE\n    #     git add $FILE\n    #   done\n\n      # Commit the resolved conflicts\n      git commit -m \"Resolved merge conflicts by preferring current branch changes\"\n\n    # fi\n\n    echo \"Pushing merged changes into $(DEPLOY_BRANCH_NAME)\"\n    # git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n    # ## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n    echo \"done\"\n    # ########## End New Code\n\n    echo \"Resolve conflict at this URL: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\n    exit 1\n  else\n    echo \"PR_STATUS = $PR_STATUS\"\n  fi\n  sleep 1\ndone\nif [[ \"$PR_STATUS\" != \"succeeded\" ]]; then\n  echo \"Pull Request did NOT complete in 5sec .. PR not completed\"\n  echo \"Pull Request Status: $PR_STATUS\"\n  exit 1\nfi\n################################\necho \"Completing PR: deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\"\naz repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\"\n################################\nattempts=3\n## Trying to complete the PR 3 times\nwhile : ; do\n  az repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\" | jq --unbuffered '.closedBy' > closed_by_file\n  export CLOSED_BY=`cat closed_by_file`\n  echo \"PR closed by: $CLOSED_BY\"\n  if [[ $CLOSED_BY == 'null' ]]; then\n    sleep 1\n  else\n    ## Ensure that source branch is deleted\n    cd $(MANIFEST_DIR)\n    git push origin --delete $(DEPLOY_BRANCH_NAME)\n    break\n  fi\n  ((attempts--))\n  [[ $attempts > 0 ]] || break\ndone\n## If the PR has not been completed, forcing a pipeline failure\nif [[ $CLOSED_BY == 'null' ]]; then\n  echo \"##vso[task.logissue type=error]The gitops workflow was not able to complete the automated PR for for $(service.identifier) service in $(cluster.name) cluster.\"\n  exit 1\nelse\n  echo \"##[debug]Gitops PR for $(service.identifier) service in $(cluster.name) cluster completed: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\nfi\n##############################\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
  - deployment: "ArgoCD_Sync_Source_of_Truth"
    displayName: "ArgoCD_Sync_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - GitOps_Update_Source_of_Truth
    environment:
      name: Openshift jPerf01
    pool:
      name: ST-AgentPool
      demands:
      - Agent.OS -equals Linux
    container:
      image: enterpriseartifactory.bkfs.com:5000/bre/containers/bre_ubi8_oc:latest
      options: --entrypoint=""
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            condition: false
            inputs:
              alias: none
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 1: $(argocd.context) > $(cluster.namespace)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# Show ArgoCD version\n  argocd version $(argocd.sync.insecure)\n# ArgoCD sync phase 1 - best effort to reach service.identifer sync:\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing root ado-$(argocd.context)'s Applications - specifically Namespace $(cluster.namespace) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(cluster.namespace) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait ado-$(argocd.context) --sync --resource argoproj.io:Application:$(cluster.namespace) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait ado-$(argocd.context) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync ado-$(argocd.context) $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true\n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait ado-$(argocd.context) --sync --operation $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 2: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# ArgoCD sync phase 2 - best effort to run Project bootstrap PreSync Hook Job and sync service.identifer(s):\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing/Running ArgoCD Namespace bootstrap Job - to create k8s Namespace $(cluster.namespace) and sync all leaf Service Applications - including $(argocd.identifier) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(argocd.identifier) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait $(cluster.namespace) --sync --resource argoproj.io:Application:$(argocd.identifier) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    if argocd app get $(cluster.namespace) $(argocd.sync.insecure) | grep rbac.authorization | grep OutOfSync\n    then\n      notsync=$((notsync+1))\n    fi\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait $(cluster.namespace) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync $(cluster.namespace) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait $(cluster.namespace) --sync --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 3: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) > $(service.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: |
                # ArgoCD sync phase 3 - wait for everything, including health:
                  date
                  try_fail="1 2 3 4 5"
                  for fail in try_fail;
                  do
                      echo "PipeStatus: ${PIPESTATUS[@]}"
                      echo -e "\n\n\n############# Syncing all k8s manifests under leaf Service Application $(argocd.identifier) #############"
                      echo "Performing sync..."
                      argocd app sync $(argocd.identifier) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi
                      echo "Post argocd app wait for active/pending --sync & --health status"
                      argocd app wait $(argocd.identifier) $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result; if [[ $(cat result) -ne 0 ]];then sleep 1;fi
                  done
                  date
- stage: OpenshiftrPerf01__openshift_cluster_observability_operator__cluster_observability_operator__
  displayName: Openshift rPerf01 - cluster-observability-operator
  pool:
    vmImage: ubuntu-latest
  variables:
  - name: target.k8splatform
    value: ocp
  - name: upperK8splatform
    value: OCP
  - group: Openshift rPerf01 - infra
  - name: occluster.project
    value: openshift-cluster-observability-operator
  - name: cluster.namespace
    value: openshift-cluster-observability-operator
  - name: service.identifier
    value: cluster-observability-operator
  - name: image.identifier
    value: $(image.repo)/:$(Build.BuildNumber)
  - name: service.buildid
    value: '"$(Build.BuildNumber)"'
  - name: service.buildidnoquotes
    value: '$(Build.BuildNumber)'
  - name: argocd.identifier
    value: $(service.identifier)
  - name: ns.annotate.node.select
    value: ' '
  - name: cluster.gitops-name
    value: $(cluster.name)
  - name: argocd.context
    value: infra
  - name: argocdSyncTimeout
    value: '600'
  - name: argocd.sync.prune
    value: '--prune'
  - name: argocd.sync.insecure
    value: '--insecure'
  - name: argocd.syncPolicy
    value: '{}'
  - name: ado.argocd.diffignore
    value: ' '
  - name: argocd.diffignore
    value: ' '
  - name: argocd.service.labels
    value: ' '
  - name: argocd.recurse
    value: |
      directory:
            recurse: true
  - name: helm.enabled
    value: ' '
  - name: manifestspath
    value: observability
  - name: tokenPattern
    value: 'doublebraces'
  - name: semVersion
    value: 1.0
  - name: Build.BuildNumber
    value: $(semVersion)$(Rev:.r)
  - name: MANIFEST_DIR
    value: $(System.DefaultWorkingDirectory)/$(gitops.repo)
  - name: ARGOCD_APPS_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml
  - name: ARGOCD_SERVICE_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml
  - name: ARGOCD_BOOTSTRAP_APPS_RBAC
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps
  - name: ARGOCD_BOOTSTRAP_NAMESPACE
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap
  - name: DEPLOY_BRANCH_NAME
    value: deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)
  - name: ARGOCD_SERVICE_FOLDER
    value: $(cluster.name)/$(cluster.namespace)
  - name: MANIFESTS_FOLDER
    value: $(cluster.name)/$(cluster.namespace)/$(service.identifier)
  - name: sourceCodeRepo
    value: $[ resources.repositories['srcDevRepo'].name ]
  - name: MANIFESTS_ARTIFACT_PATH
    value: $(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)
  - name: ARGOCD_NAMESPACE_FOLDER
    value: $(cluster.name)/argocd-$(argocd.context)
  - name: sub.channel
    value: stable
  - name: ip.approval
    value: Automatic
  - name: startingCSV
    value: cluster-observability-operator.v1.1.0
  jobs:
  - job: "Validate_variables"
    displayName: "Validate_variables"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      condition: false
      inputs:
        repository: none
    - task: CmdLine@2
      displayName: "View variables"
      inputs:
        script: "echo \"Parameters passed to pipeline:\"\necho '{\n  \"argocd\": {\n    \"k8sGitOpsArgoCD\": \"\",\n    \"k8s\": {\n      \"k8splatform\": \"ocp\",\n      \"environment\": \"Openshift rPerf01\",\n      \"namespace\": \"openshift-cluster-observability-operator\",\n      \"serviceIdentifier\": \"cluster-observability-operator\"\n    },\n    \"argocd\": {\n      \"context\": \"infra\",\n      \"namespaceNodeSelect\": \"worker\",\n      \"syncInsecure\": \"True\",\n      \"syncPrune\": \"True\"\n    },\n    \"manifests\": {\n      \"path\": \"observability\"\n    },\n    \"customVarsTemplate\": \"vars.yaml\"\n  },\n  \"dockerContainerRegistry\": \"\",\n  \"dockerimage\": \"\",\n  \"validateVarsOnly\": \"False\",\n  \"appDynamics\": {},\n  \"multiParallelEnv\": \"True\",\n  \"stagename\": \"Openshift rPerf01__openshift-cluster-observability-operator__cluster-observability-operator__\",\n  \"selfServicePipeline\": \"False\"\n}'\ncat <<'EOF'\nStage info: \n    name: $(System.StageName) \n    display: $(System.StageDisplayName) \n    attempt: $(System.StageAttempt)\nParameters/Variables defined or defaulted when calling k8sGitOpsArgoCD listed below:\n  k8s:\n    k8splatform: $(target.k8splatform)\n    ADO Environment: Openshift rPerf01\n    ADO Variable Group: Openshift rPerf01 - $(argocd.context)\n    project: $(occluster.project)\n    namespace: $(cluster.namespace)\n    serviceIdentifier: $(service.identifier)\n    image.identifier: $(image.identifier)\n    service.buidid: $(service.buildid)\n    argocd.identifier: $(argocd.identifier)\n    namespaceNodeSelect: $(ns.annotate.node.select)\n  argocd: \n    context: $(argocd.context)\n    syncStep: \n    syncTimeout: $(argocdSyncTimeout)\n    syncPrune: $(argocd.sync.prune)\n    syncInsecure: $(argocd.sync.insecure)\n    autoSyncPolicy: $(argocd.syncPolicy)\n    diffIgnore: $(ado.argocd.diffignore)\n    recurse: $(argocd.recurse)\n  manifests:\n    path: $(manifestspath)\n    replaceTokenPattern: $(tokenPattern)\n  customVarsTemplate: vars.yaml\nMisc ADO build vars:\n  semVersion: $(semVersion)\n  Build.BuildNumber: $(Build.BuildNumber)\nGitOps Directories involved in next steps:\n  MANIFEST_DIR: $(MANIFEST_DIR)\n  ARGOCD_APPS_MANIFEST: $(ARGOCD_APPS_MANIFEST)\n  ARGOCD_SERVICE_MANIFEST: $(ARGOCD_SERVICE_MANIFEST)\n  ARGOCD_BOOTSTRAP_APPS_RBAC: $(ARGOCD_BOOTSTRAP_APPS_RBAC)\n  ARGOCD_BOOTSTRAP_NAMESPACE: $(ARGOCD_BOOTSTRAP_NAMESPACE)\n  DEPLOY_BRANCH_NAME: $(DEPLOY_BRANCH_NAME)\n  ARGOCD_SERVICE_FOLDER: $(ARGOCD_SERVICE_FOLDER)\n  MANIFESTS_FOLDER: $(MANIFESTS_FOLDER)\n  MANIFESTS_ARTIFACT_PATH: $(MANIFESTS_ARTIFACT_PATH)\n  ARGOCD_NAMESPACE_FOLDER: $(ARGOCD_NAMESPACE_FOLDER)\nEOF\necho \"Variables passed in from App team var template:\"\necho '{\n  \"system\": \"build\",\n  \"system.hosttype\": \"build\",\n  \"system.servertype\": \"Hosted\",\n  \"system.culture\": \"en-US\",\n  \"system.collectionId\": \"a1d50930-84e6-45c1-8b89-a50cf285f127\",\n  \"system.collectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.teamFoundationCollectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.taskDefinitionsUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.pipelineStartTime\": \"2025-04-21 12:03:10-04:00\",\n  \"system.teamProject\": \"Default\",\n  \"system.teamProjectId\": \"61eb34c0-17a0-4875-b525-7a0b0072c15e\",\n  \"system.definitionId\": \"9071\",\n  \"build.definitionName\": \"ocp-cluster-observability-ado\",\n  \"build.repository.id\": \"facbd320-4176-47dc-a2e9-10270df8e4eb\",\n  \"build.repository.name\": \"ocp-cluster-observability\",\n  \"build.repository.uri\": \"https://dev.azure.com/bki-st/Default/_git/ocp-cluster-observability\",\n  \"build.definitionVersion\": \"4\",\n  \"USE_MSDEPLOY_TOKEN_AUTH\": \"true\",\n  \"DistributedTask.Agent.AddForceCredentialsToGitCheckout\": \"True\",\n  \"DistributedTask.Agent.AgentEnablePipelineArtifactLargeChunkSize\": \"True\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated\": \"False\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated246\": \"False\",\n  \"DistributedTask.Agent.CleanupPsModulesInPowershell\": \"False\",\n  \"DistributedTask.Agent.ContinueAfterCancelProcessTreeKillAttempt\": \"True\",\n  \"DistributedTask.Agent.DockerActionRetries\": \"True\",\n  \"DistributedTask.Agent.EnableAdditionalMaskingRegexes\": \"True\",\n  \"DistributedTask.Agent.EnableIssueSourceValidation\": \"True\",\n  \"DistributedTask.Agent.EnableResourceMonitorDebugOutput\": \"True\",\n  \"DistributedTask.Agent.EnableResourceUtilizationWarnings\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedBuildTask\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedTask\": \"True\",\n  \"DistributedTask.Agent.FailJobWhenAgentDies\": \"True\",\n  \"DistributedTask.Agent.FixPossibleGitOutOfMemoryProblem\": \"False\",\n  \"DistributedTask.Agent.ForceUpdateToLatest2Version\": \"False\",\n  \"DistributedTask.Agent.IgnoreVSTSTaskLib\": \"True\",\n  \"DistributedTask.Agent.LogTaskNameInUserAgent\": \"True\",\n  \"DistributedTask.Agent.LogToBlobstorageService\": \"True\",\n  \"DistributedTask.Agent.MountWorkspace\": \"True\",\n  \"DistributedTask.Agent.ReadOnlyVariables\": \"True\",\n  \"DistributedTask.Agent.Rosetta2Warning\": \"True\",\n  \"DistributedTask.Agent.UploadBuildArtifactsToBlob\": \"True\",\n  \"DistributedTask.Agent.UploadTimelineAttachmentsToBlob\": \"True\",\n  \"DistributedTask.Agent.UseDockerComposeV2CompatibleMode\": \"False\",\n  \"DistributedTask.Agent.UseFetchFilterInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseGitLongPaths\": \"True\",\n  \"DistributedTask.Agent.UseInteropToFindParentProcess\": \"True\",\n  \"DistributedTask.Agent.UseLatestGitVersion\": \"True\",\n  \"DistributedTask.Agent.UseMsalLibrary\": \"True\",\n  \"DistributedTask.Agent.USENEWNODEHANDLERTELEMETRY\": \"True\",\n  \"DistributedTask.Agent.UseNode20ToStartContainer\": \"True\",\n  \"DistributedTask.Agent.UseSparseCheckoutInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseWorkspaceId\": \"True\",\n  \"DistributedTask.Tasks.CopyFilesOverSSHV0UseQueue\": \"True\",\n  \"DistributedTask.Tasks.ModifyNumberOfRetriesInRobocopy\": \"True\",\n  \"DistributedTask.Tasks.Node.SkipDebugLogsWhenDebugModeOff\": \"True\",\n  \"DistributedTask.Tasks.RetireAzureRMPowerShellModule\": \"True\",\n  \"DistributedTask.Tasks.useJacocoTemplateV2forSingleModule\": \"True\",\n  \"DistributedTask.Tasks.UseLatestOpensslVersion\": \"True\",\n  \"build.definitionFolderPath\": \"\\\\ocp-native-ado\",\n  \"VSTSAGENT_CONTINUE_AFTER_CANCEL_PROCESSTREEKILL_ATTEMPT\": \"true\",\n  \"VSTSAGENT_DOCKER_ACTION_RETRIES\": \"true\",\n  \"USE_MSAL\": \"true\",\n  \"AZP_75787_ENABLE_COLLECT\": \"true\",\n  \"AZP_75787_ENABLE_NEW_PH_LOGIC\": \"true\",\n  \"AZP_AGENT_CHECK_FOR_TASK_DEPRECATION\": \"true\",\n  \"AZP_AGENT_MOUNT_WORKSPACE\": \"true\",\n  \"AZP_AGENT_IGNORE_VSTSTASKLIB\": \"true\",\n  \"AZP_PS_ENABLE_INVOKE_PROCESS\": \"true\",\n  \"FAIL_DEPRECATED_TASK\": \"true\",\n  \"AZP_AGENT_LOG_TASKNAME_IN_USERAGENT\": \"true\",\n  \"AGENT_USE_FETCH_FILTER_IN_CHECKOUT_TASK\": \"true\",\n  \"AGENT_USE_SPARSE_CHECKOUT_IN_CHECKOUT_TASK\": \"true\",\n  \"USE_OPENSSL_LATEST_VERSION\": \"true\",\n  \"MODIFY_NUMBER_OF_RETRIES_IN_ROBOCOPY\": \"true\",\n  \"AZP_75787_ENABLE_NEW_LOGIC\": \"false\",\n  \"AZP_75787_ENABLE_NEW_LOGIC_LOG\": \"false\",\n  \"AGENT_ENABLE_PIPELINEARTIFACT_LARGE_CHUNK_SIZE\": \"true\",\n  \"FAIL_JOB_WHEN_AGENT_DIES\": \"true\",\n  \"USE_LATEST_GIT_VERSION\": \"true\",\n  \"USE_GIT_LONG_PATHS\": \"true\",\n  \"ENABLE_ISSUE_SOURCE_VALIDATION\": \"true\",\n  \"RETIRE_AZURERM_POWERSHELL_MODULE\": \"true\",\n  \"AZP_ENABLE_RESOURCE_MONITOR_DEBUG_OUTPUT\": \"true\",\n  \"AZP_ENABLE_RESOURCE_UTILIZATION_WARNINGS\": \"true\",\n  \"FAIL_DEPRECATED_BUILD_TASK\": \"true\",\n  \"AZP_AGENT_USE_INTEROP_TO_FIND_PARENT_PROCESS\": \"true\",\n  \"ROSETTA2_WARNING\": \"true\",\n  \"COPYFILESOVERSSHV0_USE_QUEUE\": \"true\",\n  \"USE_FIXED_AZ_CONFIG_INIT\": \"true\",\n  \"USE_AKS_CREDENTIAL_API\": \"true\",\n  \"build.queuedBy\": \"Johnson, Rohan\",\n  \"build.queuedById\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedFor\": \"Johnson, Rohan\",\n  \"build.requestedForId\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedForEmail\": \"Rohan.Johnson@bkfs.com\",\n  \"build.sourceVersion\": \"5b7f7eab5db2124d93fc9dbb2a6724441802c2af\",\n  \"build.sourceBranch\": \"refs/heads/main\",\n  \"build.sourceBranchName\": \"main\",\n  \"build.reason\": \"Manual\",\n  \"system.pullRequest.isFork\": \"False\",\n  \"system.jobParallelismTag\": \"Private\",\n  \"system.enableAccessToken\": \"SecretVariable\",\n  \"target.k8splatform\": \"ocp\",\n  \"upperK8splatform\": \"OCP\",\n  \"occluster.project\": \"openshift-cluster-observability-operator\",\n  \"cluster.namespace\": \"openshift-cluster-observability-operator\",\n  \"service.identifier\": \"cluster-observability-operator\",\n  \"image.identifier\": \"$(image.repo)/:$(Build.BuildNumber)\",\n  \"service.buildid\": \"\\\"$(Build.BuildNumber)\\\"\",\n  \"service.buildidnoquotes\": \"$(Build.BuildNumber)\",\n  \"argocd.identifier\": \"$(service.identifier)\",\n  \"ns.annotate.node.select\": \" \",\n  \"cluster.gitops-name\": \"$(cluster.name)\",\n  \"argocd.context\": \"infra\",\n  \"argocdSyncTimeout\": \"600\",\n  \"argocd.sync.prune\": \"--prune\",\n  \"argocd.sync.insecure\": \"--insecure\",\n  \"argocd.syncPolicy\": \"{}\",\n  \"ado.argocd.diffignore\": \" \",\n  \"argocd.diffignore\": \" \",\n  \"argocd.service.labels\": \" \",\n  \"argocd.recurse\": \"directory:\\n      recurse: true\\n\",\n  \"helm.enabled\": \" \",\n  \"manifestspath\": \"observability\",\n  \"tokenPattern\": \"doublebraces\",\n  \"semVersion\": \"1.0\",\n  \"Build.BuildNumber\": \"$(semVersion)$(Rev:.r)\",\n  \"MANIFEST_DIR\": \"$(System.DefaultWorkingDirectory)/$(gitops.repo)\",\n  \"ARGOCD_APPS_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml\",\n  \"ARGOCD_SERVICE_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml\",\n  \"ARGOCD_BOOTSTRAP_APPS_RBAC\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps\",\n  \"ARGOCD_BOOTSTRAP_NAMESPACE\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap\",\n  \"DEPLOY_BRANCH_NAME\": \"deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)\",\n  \"ARGOCD_SERVICE_FOLDER\": \"$(cluster.name)/$(cluster.namespace)\",\n  \"MANIFESTS_FOLDER\": \"$(cluster.name)/$(cluster.namespace)/$(service.identifier)\",\n  \"sourceCodeRepo\": \"$[ resources.repositories['srcDevRepo'].name ]\",\n  \"MANIFESTS_ARTIFACT_PATH\": \"$(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)\",\n  \"ARGOCD_NAMESPACE_FOLDER\": \"$(cluster.name)/argocd-$(argocd.context)\",\n  \"sub.channel\": \"stable\",\n  \"ip.approval\": \"Automatic\",\n  \"startingCSV\": \"cluster-observability-operator.v1.1.0\"\n}' | sed '/ARGOCD_NAMESPACE_FOLDER/,$!d ; /ARGOCD_NAMESPACE_FOLDER/d ; /^}/d'\n"
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Validate variables"
      inputs:
        script: |
          if ! [[ "$(argocd.context)" =~ ^(apps|infra)$ ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.argocd.context must be \"apps\" or \"infra\"" ; exit 1 ; fi
          if ! [[ "$(target.k8splatform)" =~ ^(eks|ocp)$ ]] ; then echo "ERROR - variable k8splatform must be \"eks\" or \"ocp\"" ; exit 1 ; fi
          if [[ "$(manifestspath)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.manifests.path is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(occluster.project)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.k8s.namespace is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(service.identifier)" == "MISSING" ]] ; then echo "ERROR - parameters.argocd.k8s.serviceIdentifier is missing from your pipeline" ; exit 1 ; fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
  - job: "GitOps_Update_Source_of_Truth"
    displayName: "GitOps_Update_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - Validate_variables
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://Default/openshift-gitops-infra@master
        persistCredentials: true
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://bre/argocd@master
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: srcDevRepo
    - task: CmdLine@2
      displayName: "Prepare temporary location for raw ArgoCD manifests"
      inputs:
        script: |
          #echo "$(image)"
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)
          echo "System.DefaultWorkingDirectory = $(System.DefaultWorkingDirectory)"
          echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
          echo "Build.DefinitionName = $(Build.DefinitionName)"
          #echo "tree Build.SourcesDirectory"
          #tree $(Build.SourcesDirectory)
          #echo "tree Pipeline.Workspace"
          #tree $(Pipeline.Workspace)/
          #echo "tree DEPLOY_BRANCH_NAME"
          #tree $(DEPLOY_BRANCH_NAME)/
          #tree $(Pipeline.Workspace)
          echo "Copy ArgoCD Namespace Application template to GitOps repo directory"
          cp $(ARGOCD_APPS_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml
          echo "Copy ArgoCD Service Application template to GitOps repo directory"
          cp $(ARGOCD_SERVICE_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
          echo "Copy ArgoCD Bootstrap Namespace template(s) to GitOps repo directory"
          cp $(ARGOCD_BOOTSTRAP_NAMESPACE)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          if [[ "$(argocd.context)" == "apps" && "$(target.k8splatform)" == "ocp" ]] || [[ "$(target.k8splatform)" == "eks" ]]  ; then
            echo "Copy ArgoCD Namespace RBAC template(s) to GitOps repo directory"
            cp $(ARGOCD_BOOTSTRAP_APPS_RBAC)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Configure Git"
      env:
        USER_NAME: "Git-Ops"
        USER_EMAIL: "<>"
      retryCountOnTaskFailure: 2
      inputs:
        script: |
          echo "User: $USER_NAME"
          echo "User email: $USER_EMAIL"
          git config user.email $USER_EMAIL & git config user.name $USER_NAME
        failOnStderr: true
        workingDirectory: $(MANIFEST_DIR)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for ArgoCD Applications and Bootstrap files"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: Prepare temporary location for raw app/infra manifests
      inputs:
        script: |
          echo "$(MANIFESTS_ARTIFACT_PATH)"
          ls -la $(MANIFESTS_ARTIFACT_PATH)
          echo "$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/"
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/

          echo "Copy k8s manifests for $(argocd.identifier) and stage them into GitOps repo directory"
          cp -r $(MANIFESTS_ARTIFACT_PATH)/* $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for bk app/infra manifests"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: '$(tokenPattern)'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: "Purge lines containing only whitespaces in argocd app manifests"
      inputs:
        script: |
          sed -i '/^[[:space:]]*$/d' $(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)
    - task: CmdLine@2
      displayName: "Add Generated Manifest to New Branch"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo \"Create a new branch$(DEPLOY_BRANCH_NAME)\"\ngit checkout -b $(DEPLOY_BRANCH_NAME)\nmkdir -p $(ARGOCD_NAMESPACE_FOLDER)\nmkdir -p $(MANIFESTS_FOLDER)\ncp $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_NAMESPACE_FOLDER)/\nls -l $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/\nls -l $(ARGOCD_SERVICE_FOLDER)/\ncp -r $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/* $(ARGOCD_SERVICE_FOLDER)/\nrsync --delete -rv $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/ $(MANIFESTS_FOLDER)/\ngit add -A 2>&1\necho 'git commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v'\ngit commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v 2>&1\n# echo 'git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v'\n# git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \ngit push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\necho \"done with initial push\"\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
    - task: CmdLine@2
      displayName: "Merge PR for GitOps repo"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
        displayName: "Create and complete Pull Request in GitOps repo"
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo $(System.AccessToken) | az devops login\naz devops configure --defaults organization=https://dev.azure.com/bki-st project=\"Default\" --use-git-aliases true\necho \"Create PR for branch $(DEPLOY_BRANCH_NAME)\"\nPR_ID=\"\"\naz repos pr create --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) --title \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\" --squash | jq '.pullRequestId' > $(Agent.TempDirectory)/PR_ID\nexport PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\necho \"PRID: $PR_ID\"\nif [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n  #az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME)\n  az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) | jq '.[] | .pullRequestId' > $(Agent.TempDirectory)/PR_ID\n  export PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\n  echo \"PRID: $PR_ID\"\n  if [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n    echo \"ERROR: could not get a PR_ID\"\n    exit 1\n  fi\nfi\n###########################\nPR_STATUS=\"\"\nif [[ $(System.debug) == 'True' ]]; then\n  echo\n  echo\n  echo \"PR_DEBUG:\"\n  echo\n  az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus'\n  echo\n  echo\nfi\nPR_TRIES=\"1 2 3 4 5\"\nfor PR_TRY in PR_TRIES\ndo\n  PR_STATUS=$(az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus')\n  if [[ \"$PR_STATUS\" == \"succeeded\" ]]; then\n    break\n  elif [[ \"$PR_STATUS\" == \"conflicts\" ]]; then\n    echo \"MERGE Confilct detected .. merge not complete\"\n    echo \"MERGE Status: $PR_STATUS\"\n\n    # ########## New Code\n    # Generate a random number between 1 and 10\n    RANDOM_WAIT=$(( ( RANDOM % 10 ) + 1 ))\n\n    # Wait for the random number of seconds\n    echo \"Waiting for $RANDOM_WAIT seconds...\"\n    sleep $RANDOM_WAIT\n\n    echo \"Checking git remote origin\"\n    git config --get-all remote.origin.fetch\n\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    echo \"Fetching latest changes from master branch\"\n    git fetch origin master\n\n    echo \"Switching to trunk\"\n    git checkout master\n\n    echo \"Pulling latest changes from remote\"\n    git pull\n\n    echo \"Switching back to $(DEPLOY_BRANCH_NAME)\"\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    # This pull was extremely helpful in understanding the underlying problem.\n    # echo \"Pulling latest changes from master branch\"\n    # git pull https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) master\n\n    echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    git merge origin/master -X ours --no-edit\n\n    #Check if the merge was successful\n    if [ $? -ne 0 ]; then\n      echo \"Merge conflicts detected. Listing conflicted files:\"\n      git diff --name-only --diff-filter=U\n    else\n      echo \"No conflicts detected.\"\n    fi\n\n    echo \"checking git status\"\n    git status\n\n    echo \"Pushing git change\"\n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n\n    echo \"checking git status\"\n    git status\n    \n\n    # echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    # git merge origin/master -X ours --no-edit\n\n    # # Check if the merge was successful\n    # if [ $? -ne 0 ]; then\n    #   CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)\n    #   echo \"Conflicted files: $CONFLICTED_FILES\"\n    #   # Resolve conflicts by preferring changes from the current branch\n    #   for FILE in $CONFLICTED_FILES; do\n    #     git checkout --ours $FILE\n    #     git add $FILE\n    #   done\n\n      # Commit the resolved conflicts\n      git commit -m \"Resolved merge conflicts by preferring current branch changes\"\n\n    # fi\n\n    echo \"Pushing merged changes into $(DEPLOY_BRANCH_NAME)\"\n    # git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n    # ## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n    echo \"done\"\n    # ########## End New Code\n\n    echo \"Resolve conflict at this URL: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\n    exit 1\n  else\n    echo \"PR_STATUS = $PR_STATUS\"\n  fi\n  sleep 1\ndone\nif [[ \"$PR_STATUS\" != \"succeeded\" ]]; then\n  echo \"Pull Request did NOT complete in 5sec .. PR not completed\"\n  echo \"Pull Request Status: $PR_STATUS\"\n  exit 1\nfi\n################################\necho \"Completing PR: deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\"\naz repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\"\n################################\nattempts=3\n## Trying to complete the PR 3 times\nwhile : ; do\n  az repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\" | jq --unbuffered '.closedBy' > closed_by_file\n  export CLOSED_BY=`cat closed_by_file`\n  echo \"PR closed by: $CLOSED_BY\"\n  if [[ $CLOSED_BY == 'null' ]]; then\n    sleep 1\n  else\n    ## Ensure that source branch is deleted\n    cd $(MANIFEST_DIR)\n    git push origin --delete $(DEPLOY_BRANCH_NAME)\n    break\n  fi\n  ((attempts--))\n  [[ $attempts > 0 ]] || break\ndone\n## If the PR has not been completed, forcing a pipeline failure\nif [[ $CLOSED_BY == 'null' ]]; then\n  echo \"##vso[task.logissue type=error]The gitops workflow was not able to complete the automated PR for for $(service.identifier) service in $(cluster.name) cluster.\"\n  exit 1\nelse\n  echo \"##[debug]Gitops PR for $(service.identifier) service in $(cluster.name) cluster completed: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\nfi\n##############################\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
  - deployment: "ArgoCD_Sync_Source_of_Truth"
    displayName: "ArgoCD_Sync_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - GitOps_Update_Source_of_Truth
    environment:
      name: Openshift rPerf01
    pool:
      name: ST-AgentPool
      demands:
      - Agent.OS -equals Linux
    container:
      image: enterpriseartifactory.bkfs.com:5000/bre/containers/bre_ubi8_oc:latest
      options: --entrypoint=""
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            condition: false
            inputs:
              alias: none
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 1: $(argocd.context) > $(cluster.namespace)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# Show ArgoCD version\n  argocd version $(argocd.sync.insecure)\n# ArgoCD sync phase 1 - best effort to reach service.identifer sync:\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing root ado-$(argocd.context)'s Applications - specifically Namespace $(cluster.namespace) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(cluster.namespace) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait ado-$(argocd.context) --sync --resource argoproj.io:Application:$(cluster.namespace) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait ado-$(argocd.context) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync ado-$(argocd.context) $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true\n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait ado-$(argocd.context) --sync --operation $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 2: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# ArgoCD sync phase 2 - best effort to run Project bootstrap PreSync Hook Job and sync service.identifer(s):\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing/Running ArgoCD Namespace bootstrap Job - to create k8s Namespace $(cluster.namespace) and sync all leaf Service Applications - including $(argocd.identifier) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(argocd.identifier) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait $(cluster.namespace) --sync --resource argoproj.io:Application:$(argocd.identifier) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    if argocd app get $(cluster.namespace) $(argocd.sync.insecure) | grep rbac.authorization | grep OutOfSync\n    then\n      notsync=$((notsync+1))\n    fi\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait $(cluster.namespace) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync $(cluster.namespace) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait $(cluster.namespace) --sync --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 3: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) > $(service.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: |
                # ArgoCD sync phase 3 - wait for everything, including health:
                  date
                  try_fail="1 2 3 4 5"
                  for fail in try_fail;
                  do
                      echo "PipeStatus: ${PIPESTATUS[@]}"
                      echo -e "\n\n\n############# Syncing all k8s manifests under leaf Service Application $(argocd.identifier) #############"
                      echo "Performing sync..."
                      argocd app sync $(argocd.identifier) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi
                      echo "Post argocd app wait for active/pending --sync & --health status"
                      argocd app wait $(argocd.identifier) $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result; if [[ $(cat result) -ne 0 ]];then sleep 1;fi
                  done
                  date
- stage: OpenshiftUAT01__openshift_cluster_observability_operator__cluster_observability_operator__
  displayName: Openshift UAT01 - cluster-observability-operator
  pool:
    vmImage: ubuntu-latest
  variables:
  - name: target.k8splatform
    value: ocp
  - name: upperK8splatform
    value: OCP
  - group: Openshift UAT01 - infra
  - name: occluster.project
    value: openshift-cluster-observability-operator
  - name: cluster.namespace
    value: openshift-cluster-observability-operator
  - name: service.identifier
    value: cluster-observability-operator
  - name: image.identifier
    value: $(image.repo)/:$(Build.BuildNumber)
  - name: service.buildid
    value: '"$(Build.BuildNumber)"'
  - name: service.buildidnoquotes
    value: '$(Build.BuildNumber)'
  - name: argocd.identifier
    value: $(service.identifier)
  - name: ns.annotate.node.select
    value: ' '
  - name: cluster.gitops-name
    value: $(cluster.name)
  - name: argocd.context
    value: infra
  - name: argocdSyncTimeout
    value: '600'
  - name: argocd.sync.prune
    value: '--prune'
  - name: argocd.sync.insecure
    value: '--insecure'
  - name: argocd.syncPolicy
    value: '{}'
  - name: ado.argocd.diffignore
    value: ' '
  - name: argocd.diffignore
    value: ' '
  - name: argocd.service.labels
    value: ' '
  - name: argocd.recurse
    value: |
      directory:
            recurse: true
  - name: helm.enabled
    value: ' '
  - name: manifestspath
    value: observability
  - name: tokenPattern
    value: 'doublebraces'
  - name: semVersion
    value: 1.0
  - name: Build.BuildNumber
    value: $(semVersion)$(Rev:.r)
  - name: MANIFEST_DIR
    value: $(System.DefaultWorkingDirectory)/$(gitops.repo)
  - name: ARGOCD_APPS_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml
  - name: ARGOCD_SERVICE_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml
  - name: ARGOCD_BOOTSTRAP_APPS_RBAC
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps
  - name: ARGOCD_BOOTSTRAP_NAMESPACE
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap
  - name: DEPLOY_BRANCH_NAME
    value: deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)
  - name: ARGOCD_SERVICE_FOLDER
    value: $(cluster.name)/$(cluster.namespace)
  - name: MANIFESTS_FOLDER
    value: $(cluster.name)/$(cluster.namespace)/$(service.identifier)
  - name: sourceCodeRepo
    value: $[ resources.repositories['srcDevRepo'].name ]
  - name: MANIFESTS_ARTIFACT_PATH
    value: $(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)
  - name: ARGOCD_NAMESPACE_FOLDER
    value: $(cluster.name)/argocd-$(argocd.context)
  - name: sub.channel
    value: stable
  - name: ip.approval
    value: Automatic
  - name: startingCSV
    value: cluster-observability-operator.v1.1.0
  - name: ip.approval
    value: Manual
  jobs:
  - job: "Validate_variables"
    displayName: "Validate_variables"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      condition: false
      inputs:
        repository: none
    - task: CmdLine@2
      displayName: "View variables"
      inputs:
        script: "echo \"Parameters passed to pipeline:\"\necho '{\n  \"argocd\": {\n    \"k8sGitOpsArgoCD\": \"\",\n    \"k8s\": {\n      \"k8splatform\": \"ocp\",\n      \"environment\": \"Openshift UAT01\",\n      \"namespace\": \"openshift-cluster-observability-operator\",\n      \"serviceIdentifier\": \"cluster-observability-operator\"\n    },\n    \"argocd\": {\n      \"context\": \"infra\",\n      \"namespaceNodeSelect\": \"worker\",\n      \"syncInsecure\": \"True\",\n      \"syncPrune\": \"True\"\n    },\n    \"manifests\": {\n      \"path\": \"observability\"\n    },\n    \"customVarsTemplate\": \"vars.yaml\"\n  },\n  \"dockerContainerRegistry\": \"\",\n  \"dockerimage\": \"\",\n  \"validateVarsOnly\": \"False\",\n  \"appDynamics\": {},\n  \"multiParallelEnv\": \"True\",\n  \"stagename\": \"Openshift UAT01__openshift-cluster-observability-operator__cluster-observability-operator__\",\n  \"selfServicePipeline\": \"False\"\n}'\ncat <<'EOF'\nStage info: \n    name: $(System.StageName) \n    display: $(System.StageDisplayName) \n    attempt: $(System.StageAttempt)\nParameters/Variables defined or defaulted when calling k8sGitOpsArgoCD listed below:\n  k8s:\n    k8splatform: $(target.k8splatform)\n    ADO Environment: Openshift UAT01\n    ADO Variable Group: Openshift UAT01 - $(argocd.context)\n    project: $(occluster.project)\n    namespace: $(cluster.namespace)\n    serviceIdentifier: $(service.identifier)\n    image.identifier: $(image.identifier)\n    service.buidid: $(service.buildid)\n    argocd.identifier: $(argocd.identifier)\n    namespaceNodeSelect: $(ns.annotate.node.select)\n  argocd: \n    context: $(argocd.context)\n    syncStep: \n    syncTimeout: $(argocdSyncTimeout)\n    syncPrune: $(argocd.sync.prune)\n    syncInsecure: $(argocd.sync.insecure)\n    autoSyncPolicy: $(argocd.syncPolicy)\n    diffIgnore: $(ado.argocd.diffignore)\n    recurse: $(argocd.recurse)\n  manifests:\n    path: $(manifestspath)\n    replaceTokenPattern: $(tokenPattern)\n  customVarsTemplate: vars.yaml\nMisc ADO build vars:\n  semVersion: $(semVersion)\n  Build.BuildNumber: $(Build.BuildNumber)\nGitOps Directories involved in next steps:\n  MANIFEST_DIR: $(MANIFEST_DIR)\n  ARGOCD_APPS_MANIFEST: $(ARGOCD_APPS_MANIFEST)\n  ARGOCD_SERVICE_MANIFEST: $(ARGOCD_SERVICE_MANIFEST)\n  ARGOCD_BOOTSTRAP_APPS_RBAC: $(ARGOCD_BOOTSTRAP_APPS_RBAC)\n  ARGOCD_BOOTSTRAP_NAMESPACE: $(ARGOCD_BOOTSTRAP_NAMESPACE)\n  DEPLOY_BRANCH_NAME: $(DEPLOY_BRANCH_NAME)\n  ARGOCD_SERVICE_FOLDER: $(ARGOCD_SERVICE_FOLDER)\n  MANIFESTS_FOLDER: $(MANIFESTS_FOLDER)\n  MANIFESTS_ARTIFACT_PATH: $(MANIFESTS_ARTIFACT_PATH)\n  ARGOCD_NAMESPACE_FOLDER: $(ARGOCD_NAMESPACE_FOLDER)\nEOF\necho \"Variables passed in from App team var template:\"\necho '{\n  \"system\": \"build\",\n  \"system.hosttype\": \"build\",\n  \"system.servertype\": \"Hosted\",\n  \"system.culture\": \"en-US\",\n  \"system.collectionId\": \"a1d50930-84e6-45c1-8b89-a50cf285f127\",\n  \"system.collectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.teamFoundationCollectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.taskDefinitionsUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.pipelineStartTime\": \"2025-04-21 12:03:10-04:00\",\n  \"system.teamProject\": \"Default\",\n  \"system.teamProjectId\": \"61eb34c0-17a0-4875-b525-7a0b0072c15e\",\n  \"system.definitionId\": \"9071\",\n  \"build.definitionName\": \"ocp-cluster-observability-ado\",\n  \"build.repository.id\": \"facbd320-4176-47dc-a2e9-10270df8e4eb\",\n  \"build.repository.name\": \"ocp-cluster-observability\",\n  \"build.repository.uri\": \"https://dev.azure.com/bki-st/Default/_git/ocp-cluster-observability\",\n  \"build.definitionVersion\": \"4\",\n  \"USE_MSDEPLOY_TOKEN_AUTH\": \"true\",\n  \"DistributedTask.Agent.AddForceCredentialsToGitCheckout\": \"True\",\n  \"DistributedTask.Agent.AgentEnablePipelineArtifactLargeChunkSize\": \"True\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated\": \"False\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated246\": \"False\",\n  \"DistributedTask.Agent.CleanupPsModulesInPowershell\": \"False\",\n  \"DistributedTask.Agent.ContinueAfterCancelProcessTreeKillAttempt\": \"True\",\n  \"DistributedTask.Agent.DockerActionRetries\": \"True\",\n  \"DistributedTask.Agent.EnableAdditionalMaskingRegexes\": \"True\",\n  \"DistributedTask.Agent.EnableIssueSourceValidation\": \"True\",\n  \"DistributedTask.Agent.EnableResourceMonitorDebugOutput\": \"True\",\n  \"DistributedTask.Agent.EnableResourceUtilizationWarnings\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedBuildTask\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedTask\": \"True\",\n  \"DistributedTask.Agent.FailJobWhenAgentDies\": \"True\",\n  \"DistributedTask.Agent.FixPossibleGitOutOfMemoryProblem\": \"False\",\n  \"DistributedTask.Agent.ForceUpdateToLatest2Version\": \"False\",\n  \"DistributedTask.Agent.IgnoreVSTSTaskLib\": \"True\",\n  \"DistributedTask.Agent.LogTaskNameInUserAgent\": \"True\",\n  \"DistributedTask.Agent.LogToBlobstorageService\": \"True\",\n  \"DistributedTask.Agent.MountWorkspace\": \"True\",\n  \"DistributedTask.Agent.ReadOnlyVariables\": \"True\",\n  \"DistributedTask.Agent.Rosetta2Warning\": \"True\",\n  \"DistributedTask.Agent.UploadBuildArtifactsToBlob\": \"True\",\n  \"DistributedTask.Agent.UploadTimelineAttachmentsToBlob\": \"True\",\n  \"DistributedTask.Agent.UseDockerComposeV2CompatibleMode\": \"False\",\n  \"DistributedTask.Agent.UseFetchFilterInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseGitLongPaths\": \"True\",\n  \"DistributedTask.Agent.UseInteropToFindParentProcess\": \"True\",\n  \"DistributedTask.Agent.UseLatestGitVersion\": \"True\",\n  \"DistributedTask.Agent.UseMsalLibrary\": \"True\",\n  \"DistributedTask.Agent.USENEWNODEHANDLERTELEMETRY\": \"True\",\n  \"DistributedTask.Agent.UseNode20ToStartContainer\": \"True\",\n  \"DistributedTask.Agent.UseSparseCheckoutInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseWorkspaceId\": \"True\",\n  \"DistributedTask.Tasks.CopyFilesOverSSHV0UseQueue\": \"True\",\n  \"DistributedTask.Tasks.ModifyNumberOfRetriesInRobocopy\": \"True\",\n  \"DistributedTask.Tasks.Node.SkipDebugLogsWhenDebugModeOff\": \"True\",\n  \"DistributedTask.Tasks.RetireAzureRMPowerShellModule\": \"True\",\n  \"DistributedTask.Tasks.useJacocoTemplateV2forSingleModule\": \"True\",\n  \"DistributedTask.Tasks.UseLatestOpensslVersion\": \"True\",\n  \"build.definitionFolderPath\": \"\\\\ocp-native-ado\",\n  \"VSTSAGENT_CONTINUE_AFTER_CANCEL_PROCESSTREEKILL_ATTEMPT\": \"true\",\n  \"VSTSAGENT_DOCKER_ACTION_RETRIES\": \"true\",\n  \"USE_MSAL\": \"true\",\n  \"AZP_75787_ENABLE_COLLECT\": \"true\",\n  \"AZP_75787_ENABLE_NEW_PH_LOGIC\": \"true\",\n  \"AZP_AGENT_CHECK_FOR_TASK_DEPRECATION\": \"true\",\n  \"AZP_AGENT_MOUNT_WORKSPACE\": \"true\",\n  \"AZP_AGENT_IGNORE_VSTSTASKLIB\": \"true\",\n  \"AZP_PS_ENABLE_INVOKE_PROCESS\": \"true\",\n  \"FAIL_DEPRECATED_TASK\": \"true\",\n  \"AZP_AGENT_LOG_TASKNAME_IN_USERAGENT\": \"true\",\n  \"AGENT_USE_FETCH_FILTER_IN_CHECKOUT_TASK\": \"true\",\n  \"AGENT_USE_SPARSE_CHECKOUT_IN_CHECKOUT_TASK\": \"true\",\n  \"USE_OPENSSL_LATEST_VERSION\": \"true\",\n  \"MODIFY_NUMBER_OF_RETRIES_IN_ROBOCOPY\": \"true\",\n  \"AZP_75787_ENABLE_NEW_LOGIC\": \"false\",\n  \"AZP_75787_ENABLE_NEW_LOGIC_LOG\": \"false\",\n  \"AGENT_ENABLE_PIPELINEARTIFACT_LARGE_CHUNK_SIZE\": \"true\",\n  \"FAIL_JOB_WHEN_AGENT_DIES\": \"true\",\n  \"USE_LATEST_GIT_VERSION\": \"true\",\n  \"USE_GIT_LONG_PATHS\": \"true\",\n  \"ENABLE_ISSUE_SOURCE_VALIDATION\": \"true\",\n  \"RETIRE_AZURERM_POWERSHELL_MODULE\": \"true\",\n  \"AZP_ENABLE_RESOURCE_MONITOR_DEBUG_OUTPUT\": \"true\",\n  \"AZP_ENABLE_RESOURCE_UTILIZATION_WARNINGS\": \"true\",\n  \"FAIL_DEPRECATED_BUILD_TASK\": \"true\",\n  \"AZP_AGENT_USE_INTEROP_TO_FIND_PARENT_PROCESS\": \"true\",\n  \"ROSETTA2_WARNING\": \"true\",\n  \"COPYFILESOVERSSHV0_USE_QUEUE\": \"true\",\n  \"USE_FIXED_AZ_CONFIG_INIT\": \"true\",\n  \"USE_AKS_CREDENTIAL_API\": \"true\",\n  \"build.queuedBy\": \"Johnson, Rohan\",\n  \"build.queuedById\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedFor\": \"Johnson, Rohan\",\n  \"build.requestedForId\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedForEmail\": \"Rohan.Johnson@bkfs.com\",\n  \"build.sourceVersion\": \"5b7f7eab5db2124d93fc9dbb2a6724441802c2af\",\n  \"build.sourceBranch\": \"refs/heads/main\",\n  \"build.sourceBranchName\": \"main\",\n  \"build.reason\": \"Manual\",\n  \"system.pullRequest.isFork\": \"False\",\n  \"system.jobParallelismTag\": \"Private\",\n  \"system.enableAccessToken\": \"SecretVariable\",\n  \"target.k8splatform\": \"ocp\",\n  \"upperK8splatform\": \"OCP\",\n  \"occluster.project\": \"openshift-cluster-observability-operator\",\n  \"cluster.namespace\": \"openshift-cluster-observability-operator\",\n  \"service.identifier\": \"cluster-observability-operator\",\n  \"image.identifier\": \"$(image.repo)/:$(Build.BuildNumber)\",\n  \"service.buildid\": \"\\\"$(Build.BuildNumber)\\\"\",\n  \"service.buildidnoquotes\": \"$(Build.BuildNumber)\",\n  \"argocd.identifier\": \"$(service.identifier)\",\n  \"ns.annotate.node.select\": \" \",\n  \"cluster.gitops-name\": \"$(cluster.name)\",\n  \"argocd.context\": \"infra\",\n  \"argocdSyncTimeout\": \"600\",\n  \"argocd.sync.prune\": \"--prune\",\n  \"argocd.sync.insecure\": \"--insecure\",\n  \"argocd.syncPolicy\": \"{}\",\n  \"ado.argocd.diffignore\": \" \",\n  \"argocd.diffignore\": \" \",\n  \"argocd.service.labels\": \" \",\n  \"argocd.recurse\": \"directory:\\n      recurse: true\\n\",\n  \"helm.enabled\": \" \",\n  \"manifestspath\": \"observability\",\n  \"tokenPattern\": \"doublebraces\",\n  \"semVersion\": \"1.0\",\n  \"Build.BuildNumber\": \"$(semVersion)$(Rev:.r)\",\n  \"MANIFEST_DIR\": \"$(System.DefaultWorkingDirectory)/$(gitops.repo)\",\n  \"ARGOCD_APPS_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml\",\n  \"ARGOCD_SERVICE_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml\",\n  \"ARGOCD_BOOTSTRAP_APPS_RBAC\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps\",\n  \"ARGOCD_BOOTSTRAP_NAMESPACE\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap\",\n  \"DEPLOY_BRANCH_NAME\": \"deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)\",\n  \"ARGOCD_SERVICE_FOLDER\": \"$(cluster.name)/$(cluster.namespace)\",\n  \"MANIFESTS_FOLDER\": \"$(cluster.name)/$(cluster.namespace)/$(service.identifier)\",\n  \"sourceCodeRepo\": \"$[ resources.repositories['srcDevRepo'].name ]\",\n  \"MANIFESTS_ARTIFACT_PATH\": \"$(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)\",\n  \"ARGOCD_NAMESPACE_FOLDER\": \"$(cluster.name)/argocd-$(argocd.context)\",\n  \"sub.channel\": \"stable\",\n  \"ip.approval\": \"Manual\",\n  \"startingCSV\": \"cluster-observability-operator.v1.1.0\"\n}' | sed '/ARGOCD_NAMESPACE_FOLDER/,$!d ; /ARGOCD_NAMESPACE_FOLDER/d ; /^}/d'\n"
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Validate variables"
      inputs:
        script: |
          if ! [[ "$(argocd.context)" =~ ^(apps|infra)$ ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.argocd.context must be \"apps\" or \"infra\"" ; exit 1 ; fi
          if ! [[ "$(target.k8splatform)" =~ ^(eks|ocp)$ ]] ; then echo "ERROR - variable k8splatform must be \"eks\" or \"ocp\"" ; exit 1 ; fi
          if [[ "$(manifestspath)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.manifests.path is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(occluster.project)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.k8s.namespace is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(service.identifier)" == "MISSING" ]] ; then echo "ERROR - parameters.argocd.k8s.serviceIdentifier is missing from your pipeline" ; exit 1 ; fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
  - job: "GitOps_Update_Source_of_Truth"
    displayName: "GitOps_Update_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - Validate_variables
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://Default/openshift-gitops-infra@master
        persistCredentials: true
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://bre/argocd@master
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: srcDevRepo
    - task: CmdLine@2
      displayName: "Prepare temporary location for raw ArgoCD manifests"
      inputs:
        script: |
          #echo "$(image)"
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)
          echo "System.DefaultWorkingDirectory = $(System.DefaultWorkingDirectory)"
          echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
          echo "Build.DefinitionName = $(Build.DefinitionName)"
          #echo "tree Build.SourcesDirectory"
          #tree $(Build.SourcesDirectory)
          #echo "tree Pipeline.Workspace"
          #tree $(Pipeline.Workspace)/
          #echo "tree DEPLOY_BRANCH_NAME"
          #tree $(DEPLOY_BRANCH_NAME)/
          #tree $(Pipeline.Workspace)
          echo "Copy ArgoCD Namespace Application template to GitOps repo directory"
          cp $(ARGOCD_APPS_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml
          echo "Copy ArgoCD Service Application template to GitOps repo directory"
          cp $(ARGOCD_SERVICE_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
          echo "Copy ArgoCD Bootstrap Namespace template(s) to GitOps repo directory"
          cp $(ARGOCD_BOOTSTRAP_NAMESPACE)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          if [[ "$(argocd.context)" == "apps" && "$(target.k8splatform)" == "ocp" ]] || [[ "$(target.k8splatform)" == "eks" ]]  ; then
            echo "Copy ArgoCD Namespace RBAC template(s) to GitOps repo directory"
            cp $(ARGOCD_BOOTSTRAP_APPS_RBAC)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Configure Git"
      env:
        USER_NAME: "Git-Ops"
        USER_EMAIL: "<>"
      retryCountOnTaskFailure: 2
      inputs:
        script: |
          echo "User: $USER_NAME"
          echo "User email: $USER_EMAIL"
          git config user.email $USER_EMAIL & git config user.name $USER_NAME
        failOnStderr: true
        workingDirectory: $(MANIFEST_DIR)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for ArgoCD Applications and Bootstrap files"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: Prepare temporary location for raw app/infra manifests
      inputs:
        script: |
          echo "$(MANIFESTS_ARTIFACT_PATH)"
          ls -la $(MANIFESTS_ARTIFACT_PATH)
          echo "$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/"
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/

          echo "Copy k8s manifests for $(argocd.identifier) and stage them into GitOps repo directory"
          cp -r $(MANIFESTS_ARTIFACT_PATH)/* $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for bk app/infra manifests"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: '$(tokenPattern)'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: "Purge lines containing only whitespaces in argocd app manifests"
      inputs:
        script: |
          sed -i '/^[[:space:]]*$/d' $(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)
    - task: CmdLine@2
      displayName: "Add Generated Manifest to New Branch"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo \"Create a new branch$(DEPLOY_BRANCH_NAME)\"\ngit checkout -b $(DEPLOY_BRANCH_NAME)\nmkdir -p $(ARGOCD_NAMESPACE_FOLDER)\nmkdir -p $(MANIFESTS_FOLDER)\ncp $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_NAMESPACE_FOLDER)/\nls -l $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/\nls -l $(ARGOCD_SERVICE_FOLDER)/\ncp -r $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/* $(ARGOCD_SERVICE_FOLDER)/\nrsync --delete -rv $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/ $(MANIFESTS_FOLDER)/\ngit add -A 2>&1\necho 'git commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v'\ngit commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v 2>&1\n# echo 'git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v'\n# git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \ngit push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\necho \"done with initial push\"\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
    - task: CmdLine@2
      displayName: "Merge PR for GitOps repo"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
        displayName: "Create and complete Pull Request in GitOps repo"
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo $(System.AccessToken) | az devops login\naz devops configure --defaults organization=https://dev.azure.com/bki-st project=\"Default\" --use-git-aliases true\necho \"Create PR for branch $(DEPLOY_BRANCH_NAME)\"\nPR_ID=\"\"\naz repos pr create --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) --title \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\" --squash | jq '.pullRequestId' > $(Agent.TempDirectory)/PR_ID\nexport PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\necho \"PRID: $PR_ID\"\nif [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n  #az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME)\n  az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) | jq '.[] | .pullRequestId' > $(Agent.TempDirectory)/PR_ID\n  export PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\n  echo \"PRID: $PR_ID\"\n  if [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n    echo \"ERROR: could not get a PR_ID\"\n    exit 1\n  fi\nfi\n###########################\nPR_STATUS=\"\"\nif [[ $(System.debug) == 'True' ]]; then\n  echo\n  echo\n  echo \"PR_DEBUG:\"\n  echo\n  az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus'\n  echo\n  echo\nfi\nPR_TRIES=\"1 2 3 4 5\"\nfor PR_TRY in PR_TRIES\ndo\n  PR_STATUS=$(az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus')\n  if [[ \"$PR_STATUS\" == \"succeeded\" ]]; then\n    break\n  elif [[ \"$PR_STATUS\" == \"conflicts\" ]]; then\n    echo \"MERGE Confilct detected .. merge not complete\"\n    echo \"MERGE Status: $PR_STATUS\"\n\n    # ########## New Code\n    # Generate a random number between 1 and 10\n    RANDOM_WAIT=$(( ( RANDOM % 10 ) + 1 ))\n\n    # Wait for the random number of seconds\n    echo \"Waiting for $RANDOM_WAIT seconds...\"\n    sleep $RANDOM_WAIT\n\n    echo \"Checking git remote origin\"\n    git config --get-all remote.origin.fetch\n\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    echo \"Fetching latest changes from master branch\"\n    git fetch origin master\n\n    echo \"Switching to trunk\"\n    git checkout master\n\n    echo \"Pulling latest changes from remote\"\n    git pull\n\n    echo \"Switching back to $(DEPLOY_BRANCH_NAME)\"\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    # This pull was extremely helpful in understanding the underlying problem.\n    # echo \"Pulling latest changes from master branch\"\n    # git pull https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) master\n\n    echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    git merge origin/master -X ours --no-edit\n\n    #Check if the merge was successful\n    if [ $? -ne 0 ]; then\n      echo \"Merge conflicts detected. Listing conflicted files:\"\n      git diff --name-only --diff-filter=U\n    else\n      echo \"No conflicts detected.\"\n    fi\n\n    echo \"checking git status\"\n    git status\n\n    echo \"Pushing git change\"\n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n\n    echo \"checking git status\"\n    git status\n    \n\n    # echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    # git merge origin/master -X ours --no-edit\n\n    # # Check if the merge was successful\n    # if [ $? -ne 0 ]; then\n    #   CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)\n    #   echo \"Conflicted files: $CONFLICTED_FILES\"\n    #   # Resolve conflicts by preferring changes from the current branch\n    #   for FILE in $CONFLICTED_FILES; do\n    #     git checkout --ours $FILE\n    #     git add $FILE\n    #   done\n\n      # Commit the resolved conflicts\n      git commit -m \"Resolved merge conflicts by preferring current branch changes\"\n\n    # fi\n\n    echo \"Pushing merged changes into $(DEPLOY_BRANCH_NAME)\"\n    # git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n    # ## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n    echo \"done\"\n    # ########## End New Code\n\n    echo \"Resolve conflict at this URL: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\n    exit 1\n  else\n    echo \"PR_STATUS = $PR_STATUS\"\n  fi\n  sleep 1\ndone\nif [[ \"$PR_STATUS\" != \"succeeded\" ]]; then\n  echo \"Pull Request did NOT complete in 5sec .. PR not completed\"\n  echo \"Pull Request Status: $PR_STATUS\"\n  exit 1\nfi\n################################\necho \"Completing PR: deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\"\naz repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\"\n################################\nattempts=3\n## Trying to complete the PR 3 times\nwhile : ; do\n  az repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\" | jq --unbuffered '.closedBy' > closed_by_file\n  export CLOSED_BY=`cat closed_by_file`\n  echo \"PR closed by: $CLOSED_BY\"\n  if [[ $CLOSED_BY == 'null' ]]; then\n    sleep 1\n  else\n    ## Ensure that source branch is deleted\n    cd $(MANIFEST_DIR)\n    git push origin --delete $(DEPLOY_BRANCH_NAME)\n    break\n  fi\n  ((attempts--))\n  [[ $attempts > 0 ]] || break\ndone\n## If the PR has not been completed, forcing a pipeline failure\nif [[ $CLOSED_BY == 'null' ]]; then\n  echo \"##vso[task.logissue type=error]The gitops workflow was not able to complete the automated PR for for $(service.identifier) service in $(cluster.name) cluster.\"\n  exit 1\nelse\n  echo \"##[debug]Gitops PR for $(service.identifier) service in $(cluster.name) cluster completed: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\nfi\n##############################\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
  - deployment: "ArgoCD_Sync_Source_of_Truth"
    displayName: "ArgoCD_Sync_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - GitOps_Update_Source_of_Truth
    environment:
      name: Openshift UAT01
    pool:
      name: ST-AgentPool
      demands:
      - Agent.OS -equals Linux
    container:
      image: enterpriseartifactory.bkfs.com:5000/bre/containers/bre_ubi8_oc:latest
      options: --entrypoint=""
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            condition: false
            inputs:
              alias: none
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 1: $(argocd.context) > $(cluster.namespace)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# Show ArgoCD version\n  argocd version $(argocd.sync.insecure)\n# ArgoCD sync phase 1 - best effort to reach service.identifer sync:\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing root ado-$(argocd.context)'s Applications - specifically Namespace $(cluster.namespace) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(cluster.namespace) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait ado-$(argocd.context) --sync --resource argoproj.io:Application:$(cluster.namespace) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait ado-$(argocd.context) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync ado-$(argocd.context) $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true\n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait ado-$(argocd.context) --sync --operation $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 2: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# ArgoCD sync phase 2 - best effort to run Project bootstrap PreSync Hook Job and sync service.identifer(s):\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing/Running ArgoCD Namespace bootstrap Job - to create k8s Namespace $(cluster.namespace) and sync all leaf Service Applications - including $(argocd.identifier) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(argocd.identifier) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait $(cluster.namespace) --sync --resource argoproj.io:Application:$(argocd.identifier) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    if argocd app get $(cluster.namespace) $(argocd.sync.insecure) | grep rbac.authorization | grep OutOfSync\n    then\n      notsync=$((notsync+1))\n    fi\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait $(cluster.namespace) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync $(cluster.namespace) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait $(cluster.namespace) --sync --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 3: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) > $(service.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: |
                # ArgoCD sync phase 3 - wait for everything, including health:
                  date
                  try_fail="1 2 3 4 5"
                  for fail in try_fail;
                  do
                      echo "PipeStatus: ${PIPESTATUS[@]}"
                      echo -e "\n\n\n############# Syncing all k8s manifests under leaf Service Application $(argocd.identifier) #############"
                      echo "Performing sync..."
                      argocd app sync $(argocd.identifier) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi
                      echo "Post argocd app wait for active/pending --sync & --health status"
                      argocd app wait $(argocd.identifier) $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result; if [[ $(cat result) -ne 0 ]];then sleep 1;fi
                  done
                  date
- stage: OpenshiftjProd01__openshift_cluster_observability_operator__cluster_observability_operator__
  displayName: Openshift jProd01 - cluster-observability-operator
  pool:
    vmImage: ubuntu-latest
  variables:
  - name: target.k8splatform
    value: ocp
  - name: upperK8splatform
    value: OCP
  - group: Openshift jProd01 - infra
  - name: occluster.project
    value: openshift-cluster-observability-operator
  - name: cluster.namespace
    value: openshift-cluster-observability-operator
  - name: service.identifier
    value: cluster-observability-operator
  - name: image.identifier
    value: $(image.repo)/:$(Build.BuildNumber)
  - name: service.buildid
    value: '"$(Build.BuildNumber)"'
  - name: service.buildidnoquotes
    value: '$(Build.BuildNumber)'
  - name: argocd.identifier
    value: $(service.identifier)
  - name: ns.annotate.node.select
    value: ' '
  - name: cluster.gitops-name
    value: $(cluster.name)
  - name: argocd.context
    value: infra
  - name: argocdSyncTimeout
    value: '600'
  - name: argocd.sync.prune
    value: '--prune'
  - name: argocd.sync.insecure
    value: '--insecure'
  - name: argocd.syncPolicy
    value: '{}'
  - name: ado.argocd.diffignore
    value: ' '
  - name: argocd.diffignore
    value: ' '
  - name: argocd.service.labels
    value: ' '
  - name: argocd.recurse
    value: |
      directory:
            recurse: true
  - name: helm.enabled
    value: ' '
  - name: manifestspath
    value: observability
  - name: tokenPattern
    value: 'doublebraces'
  - name: semVersion
    value: 1.0
  - name: Build.BuildNumber
    value: $(semVersion)$(Rev:.r)
  - name: MANIFEST_DIR
    value: $(System.DefaultWorkingDirectory)/$(gitops.repo)
  - name: ARGOCD_APPS_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml
  - name: ARGOCD_SERVICE_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml
  - name: ARGOCD_BOOTSTRAP_APPS_RBAC
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps
  - name: ARGOCD_BOOTSTRAP_NAMESPACE
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap
  - name: DEPLOY_BRANCH_NAME
    value: deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)
  - name: ARGOCD_SERVICE_FOLDER
    value: $(cluster.name)/$(cluster.namespace)
  - name: MANIFESTS_FOLDER
    value: $(cluster.name)/$(cluster.namespace)/$(service.identifier)
  - name: sourceCodeRepo
    value: $[ resources.repositories['srcDevRepo'].name ]
  - name: MANIFESTS_ARTIFACT_PATH
    value: $(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)
  - name: ARGOCD_NAMESPACE_FOLDER
    value: $(cluster.name)/argocd-$(argocd.context)
  - name: sub.channel
    value: stable
  - name: ip.approval
    value: Automatic
  - name: startingCSV
    value: cluster-observability-operator.v1.1.0
  - name: ip.approval
    value: Manual
  jobs:
  - job: "Validate_variables"
    displayName: "Validate_variables"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      condition: false
      inputs:
        repository: none
    - task: CmdLine@2
      displayName: "View variables"
      inputs:
        script: "echo \"Parameters passed to pipeline:\"\necho '{\n  \"argocd\": {\n    \"k8sGitOpsArgoCD\": \"\",\n    \"k8s\": {\n      \"k8splatform\": \"ocp\",\n      \"environment\": \"Openshift jProd01\",\n      \"namespace\": \"openshift-cluster-observability-operator\",\n      \"serviceIdentifier\": \"cluster-observability-operator\"\n    },\n    \"argocd\": {\n      \"context\": \"infra\",\n      \"namespaceNodeSelect\": \"worker\",\n      \"syncInsecure\": \"True\",\n      \"syncPrune\": \"True\"\n    },\n    \"manifests\": {\n      \"path\": \"observability\"\n    },\n    \"customVarsTemplate\": \"vars.yaml\"\n  },\n  \"dockerContainerRegistry\": \"\",\n  \"dockerimage\": \"\",\n  \"validateVarsOnly\": \"False\",\n  \"appDynamics\": {},\n  \"multiParallelEnv\": \"True\",\n  \"stagename\": \"Openshift jProd01__openshift-cluster-observability-operator__cluster-observability-operator__\",\n  \"selfServicePipeline\": \"False\"\n}'\ncat <<'EOF'\nStage info: \n    name: $(System.StageName) \n    display: $(System.StageDisplayName) \n    attempt: $(System.StageAttempt)\nParameters/Variables defined or defaulted when calling k8sGitOpsArgoCD listed below:\n  k8s:\n    k8splatform: $(target.k8splatform)\n    ADO Environment: Openshift jProd01\n    ADO Variable Group: Openshift jProd01 - $(argocd.context)\n    project: $(occluster.project)\n    namespace: $(cluster.namespace)\n    serviceIdentifier: $(service.identifier)\n    image.identifier: $(image.identifier)\n    service.buidid: $(service.buildid)\n    argocd.identifier: $(argocd.identifier)\n    namespaceNodeSelect: $(ns.annotate.node.select)\n  argocd: \n    context: $(argocd.context)\n    syncStep: \n    syncTimeout: $(argocdSyncTimeout)\n    syncPrune: $(argocd.sync.prune)\n    syncInsecure: $(argocd.sync.insecure)\n    autoSyncPolicy: $(argocd.syncPolicy)\n    diffIgnore: $(ado.argocd.diffignore)\n    recurse: $(argocd.recurse)\n  manifests:\n    path: $(manifestspath)\n    replaceTokenPattern: $(tokenPattern)\n  customVarsTemplate: vars.yaml\nMisc ADO build vars:\n  semVersion: $(semVersion)\n  Build.BuildNumber: $(Build.BuildNumber)\nGitOps Directories involved in next steps:\n  MANIFEST_DIR: $(MANIFEST_DIR)\n  ARGOCD_APPS_MANIFEST: $(ARGOCD_APPS_MANIFEST)\n  ARGOCD_SERVICE_MANIFEST: $(ARGOCD_SERVICE_MANIFEST)\n  ARGOCD_BOOTSTRAP_APPS_RBAC: $(ARGOCD_BOOTSTRAP_APPS_RBAC)\n  ARGOCD_BOOTSTRAP_NAMESPACE: $(ARGOCD_BOOTSTRAP_NAMESPACE)\n  DEPLOY_BRANCH_NAME: $(DEPLOY_BRANCH_NAME)\n  ARGOCD_SERVICE_FOLDER: $(ARGOCD_SERVICE_FOLDER)\n  MANIFESTS_FOLDER: $(MANIFESTS_FOLDER)\n  MANIFESTS_ARTIFACT_PATH: $(MANIFESTS_ARTIFACT_PATH)\n  ARGOCD_NAMESPACE_FOLDER: $(ARGOCD_NAMESPACE_FOLDER)\nEOF\necho \"Variables passed in from App team var template:\"\necho '{\n  \"system\": \"build\",\n  \"system.hosttype\": \"build\",\n  \"system.servertype\": \"Hosted\",\n  \"system.culture\": \"en-US\",\n  \"system.collectionId\": \"a1d50930-84e6-45c1-8b89-a50cf285f127\",\n  \"system.collectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.teamFoundationCollectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.taskDefinitionsUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.pipelineStartTime\": \"2025-04-21 12:03:10-04:00\",\n  \"system.teamProject\": \"Default\",\n  \"system.teamProjectId\": \"61eb34c0-17a0-4875-b525-7a0b0072c15e\",\n  \"system.definitionId\": \"9071\",\n  \"build.definitionName\": \"ocp-cluster-observability-ado\",\n  \"build.repository.id\": \"facbd320-4176-47dc-a2e9-10270df8e4eb\",\n  \"build.repository.name\": \"ocp-cluster-observability\",\n  \"build.repository.uri\": \"https://dev.azure.com/bki-st/Default/_git/ocp-cluster-observability\",\n  \"build.definitionVersion\": \"4\",\n  \"USE_MSDEPLOY_TOKEN_AUTH\": \"true\",\n  \"DistributedTask.Agent.AddForceCredentialsToGitCheckout\": \"True\",\n  \"DistributedTask.Agent.AgentEnablePipelineArtifactLargeChunkSize\": \"True\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated\": \"False\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated246\": \"False\",\n  \"DistributedTask.Agent.CleanupPsModulesInPowershell\": \"False\",\n  \"DistributedTask.Agent.ContinueAfterCancelProcessTreeKillAttempt\": \"True\",\n  \"DistributedTask.Agent.DockerActionRetries\": \"True\",\n  \"DistributedTask.Agent.EnableAdditionalMaskingRegexes\": \"True\",\n  \"DistributedTask.Agent.EnableIssueSourceValidation\": \"True\",\n  \"DistributedTask.Agent.EnableResourceMonitorDebugOutput\": \"True\",\n  \"DistributedTask.Agent.EnableResourceUtilizationWarnings\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedBuildTask\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedTask\": \"True\",\n  \"DistributedTask.Agent.FailJobWhenAgentDies\": \"True\",\n  \"DistributedTask.Agent.FixPossibleGitOutOfMemoryProblem\": \"False\",\n  \"DistributedTask.Agent.ForceUpdateToLatest2Version\": \"False\",\n  \"DistributedTask.Agent.IgnoreVSTSTaskLib\": \"True\",\n  \"DistributedTask.Agent.LogTaskNameInUserAgent\": \"True\",\n  \"DistributedTask.Agent.LogToBlobstorageService\": \"True\",\n  \"DistributedTask.Agent.MountWorkspace\": \"True\",\n  \"DistributedTask.Agent.ReadOnlyVariables\": \"True\",\n  \"DistributedTask.Agent.Rosetta2Warning\": \"True\",\n  \"DistributedTask.Agent.UploadBuildArtifactsToBlob\": \"True\",\n  \"DistributedTask.Agent.UploadTimelineAttachmentsToBlob\": \"True\",\n  \"DistributedTask.Agent.UseDockerComposeV2CompatibleMode\": \"False\",\n  \"DistributedTask.Agent.UseFetchFilterInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseGitLongPaths\": \"True\",\n  \"DistributedTask.Agent.UseInteropToFindParentProcess\": \"True\",\n  \"DistributedTask.Agent.UseLatestGitVersion\": \"True\",\n  \"DistributedTask.Agent.UseMsalLibrary\": \"True\",\n  \"DistributedTask.Agent.USENEWNODEHANDLERTELEMETRY\": \"True\",\n  \"DistributedTask.Agent.UseNode20ToStartContainer\": \"True\",\n  \"DistributedTask.Agent.UseSparseCheckoutInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseWorkspaceId\": \"True\",\n  \"DistributedTask.Tasks.CopyFilesOverSSHV0UseQueue\": \"True\",\n  \"DistributedTask.Tasks.ModifyNumberOfRetriesInRobocopy\": \"True\",\n  \"DistributedTask.Tasks.Node.SkipDebugLogsWhenDebugModeOff\": \"True\",\n  \"DistributedTask.Tasks.RetireAzureRMPowerShellModule\": \"True\",\n  \"DistributedTask.Tasks.useJacocoTemplateV2forSingleModule\": \"True\",\n  \"DistributedTask.Tasks.UseLatestOpensslVersion\": \"True\",\n  \"build.definitionFolderPath\": \"\\\\ocp-native-ado\",\n  \"VSTSAGENT_CONTINUE_AFTER_CANCEL_PROCESSTREEKILL_ATTEMPT\": \"true\",\n  \"VSTSAGENT_DOCKER_ACTION_RETRIES\": \"true\",\n  \"USE_MSAL\": \"true\",\n  \"AZP_75787_ENABLE_COLLECT\": \"true\",\n  \"AZP_75787_ENABLE_NEW_PH_LOGIC\": \"true\",\n  \"AZP_AGENT_CHECK_FOR_TASK_DEPRECATION\": \"true\",\n  \"AZP_AGENT_MOUNT_WORKSPACE\": \"true\",\n  \"AZP_AGENT_IGNORE_VSTSTASKLIB\": \"true\",\n  \"AZP_PS_ENABLE_INVOKE_PROCESS\": \"true\",\n  \"FAIL_DEPRECATED_TASK\": \"true\",\n  \"AZP_AGENT_LOG_TASKNAME_IN_USERAGENT\": \"true\",\n  \"AGENT_USE_FETCH_FILTER_IN_CHECKOUT_TASK\": \"true\",\n  \"AGENT_USE_SPARSE_CHECKOUT_IN_CHECKOUT_TASK\": \"true\",\n  \"USE_OPENSSL_LATEST_VERSION\": \"true\",\n  \"MODIFY_NUMBER_OF_RETRIES_IN_ROBOCOPY\": \"true\",\n  \"AZP_75787_ENABLE_NEW_LOGIC\": \"false\",\n  \"AZP_75787_ENABLE_NEW_LOGIC_LOG\": \"false\",\n  \"AGENT_ENABLE_PIPELINEARTIFACT_LARGE_CHUNK_SIZE\": \"true\",\n  \"FAIL_JOB_WHEN_AGENT_DIES\": \"true\",\n  \"USE_LATEST_GIT_VERSION\": \"true\",\n  \"USE_GIT_LONG_PATHS\": \"true\",\n  \"ENABLE_ISSUE_SOURCE_VALIDATION\": \"true\",\n  \"RETIRE_AZURERM_POWERSHELL_MODULE\": \"true\",\n  \"AZP_ENABLE_RESOURCE_MONITOR_DEBUG_OUTPUT\": \"true\",\n  \"AZP_ENABLE_RESOURCE_UTILIZATION_WARNINGS\": \"true\",\n  \"FAIL_DEPRECATED_BUILD_TASK\": \"true\",\n  \"AZP_AGENT_USE_INTEROP_TO_FIND_PARENT_PROCESS\": \"true\",\n  \"ROSETTA2_WARNING\": \"true\",\n  \"COPYFILESOVERSSHV0_USE_QUEUE\": \"true\",\n  \"USE_FIXED_AZ_CONFIG_INIT\": \"true\",\n  \"USE_AKS_CREDENTIAL_API\": \"true\",\n  \"build.queuedBy\": \"Johnson, Rohan\",\n  \"build.queuedById\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedFor\": \"Johnson, Rohan\",\n  \"build.requestedForId\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedForEmail\": \"Rohan.Johnson@bkfs.com\",\n  \"build.sourceVersion\": \"5b7f7eab5db2124d93fc9dbb2a6724441802c2af\",\n  \"build.sourceBranch\": \"refs/heads/main\",\n  \"build.sourceBranchName\": \"main\",\n  \"build.reason\": \"Manual\",\n  \"system.pullRequest.isFork\": \"False\",\n  \"system.jobParallelismTag\": \"Private\",\n  \"system.enableAccessToken\": \"SecretVariable\",\n  \"target.k8splatform\": \"ocp\",\n  \"upperK8splatform\": \"OCP\",\n  \"occluster.project\": \"openshift-cluster-observability-operator\",\n  \"cluster.namespace\": \"openshift-cluster-observability-operator\",\n  \"service.identifier\": \"cluster-observability-operator\",\n  \"image.identifier\": \"$(image.repo)/:$(Build.BuildNumber)\",\n  \"service.buildid\": \"\\\"$(Build.BuildNumber)\\\"\",\n  \"service.buildidnoquotes\": \"$(Build.BuildNumber)\",\n  \"argocd.identifier\": \"$(service.identifier)\",\n  \"ns.annotate.node.select\": \" \",\n  \"cluster.gitops-name\": \"$(cluster.name)\",\n  \"argocd.context\": \"infra\",\n  \"argocdSyncTimeout\": \"600\",\n  \"argocd.sync.prune\": \"--prune\",\n  \"argocd.sync.insecure\": \"--insecure\",\n  \"argocd.syncPolicy\": \"{}\",\n  \"ado.argocd.diffignore\": \" \",\n  \"argocd.diffignore\": \" \",\n  \"argocd.service.labels\": \" \",\n  \"argocd.recurse\": \"directory:\\n      recurse: true\\n\",\n  \"helm.enabled\": \" \",\n  \"manifestspath\": \"observability\",\n  \"tokenPattern\": \"doublebraces\",\n  \"semVersion\": \"1.0\",\n  \"Build.BuildNumber\": \"$(semVersion)$(Rev:.r)\",\n  \"MANIFEST_DIR\": \"$(System.DefaultWorkingDirectory)/$(gitops.repo)\",\n  \"ARGOCD_APPS_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml\",\n  \"ARGOCD_SERVICE_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml\",\n  \"ARGOCD_BOOTSTRAP_APPS_RBAC\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps\",\n  \"ARGOCD_BOOTSTRAP_NAMESPACE\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap\",\n  \"DEPLOY_BRANCH_NAME\": \"deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)\",\n  \"ARGOCD_SERVICE_FOLDER\": \"$(cluster.name)/$(cluster.namespace)\",\n  \"MANIFESTS_FOLDER\": \"$(cluster.name)/$(cluster.namespace)/$(service.identifier)\",\n  \"sourceCodeRepo\": \"$[ resources.repositories['srcDevRepo'].name ]\",\n  \"MANIFESTS_ARTIFACT_PATH\": \"$(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)\",\n  \"ARGOCD_NAMESPACE_FOLDER\": \"$(cluster.name)/argocd-$(argocd.context)\",\n  \"sub.channel\": \"stable\",\n  \"ip.approval\": \"Manual\",\n  \"startingCSV\": \"cluster-observability-operator.v1.1.0\"\n}' | sed '/ARGOCD_NAMESPACE_FOLDER/,$!d ; /ARGOCD_NAMESPACE_FOLDER/d ; /^}/d'\n"
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Validate variables"
      inputs:
        script: |
          if ! [[ "$(argocd.context)" =~ ^(apps|infra)$ ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.argocd.context must be \"apps\" or \"infra\"" ; exit 1 ; fi
          if ! [[ "$(target.k8splatform)" =~ ^(eks|ocp)$ ]] ; then echo "ERROR - variable k8splatform must be \"eks\" or \"ocp\"" ; exit 1 ; fi
          if [[ "$(manifestspath)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.manifests.path is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(occluster.project)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.k8s.namespace is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(service.identifier)" == "MISSING" ]] ; then echo "ERROR - parameters.argocd.k8s.serviceIdentifier is missing from your pipeline" ; exit 1 ; fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
  - job: "GitOps_Update_Source_of_Truth"
    displayName: "GitOps_Update_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - Validate_variables
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://Default/openshift-gitops-infra@master
        persistCredentials: true
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://bre/argocd@master
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: srcDevRepo
    - task: CmdLine@2
      displayName: "Prepare temporary location for raw ArgoCD manifests"
      inputs:
        script: |
          #echo "$(image)"
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)
          echo "System.DefaultWorkingDirectory = $(System.DefaultWorkingDirectory)"
          echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
          echo "Build.DefinitionName = $(Build.DefinitionName)"
          #echo "tree Build.SourcesDirectory"
          #tree $(Build.SourcesDirectory)
          #echo "tree Pipeline.Workspace"
          #tree $(Pipeline.Workspace)/
          #echo "tree DEPLOY_BRANCH_NAME"
          #tree $(DEPLOY_BRANCH_NAME)/
          #tree $(Pipeline.Workspace)
          echo "Copy ArgoCD Namespace Application template to GitOps repo directory"
          cp $(ARGOCD_APPS_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml
          echo "Copy ArgoCD Service Application template to GitOps repo directory"
          cp $(ARGOCD_SERVICE_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
          echo "Copy ArgoCD Bootstrap Namespace template(s) to GitOps repo directory"
          cp $(ARGOCD_BOOTSTRAP_NAMESPACE)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          if [[ "$(argocd.context)" == "apps" && "$(target.k8splatform)" == "ocp" ]] || [[ "$(target.k8splatform)" == "eks" ]]  ; then
            echo "Copy ArgoCD Namespace RBAC template(s) to GitOps repo directory"
            cp $(ARGOCD_BOOTSTRAP_APPS_RBAC)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Configure Git"
      env:
        USER_NAME: "Git-Ops"
        USER_EMAIL: "<>"
      retryCountOnTaskFailure: 2
      inputs:
        script: |
          echo "User: $USER_NAME"
          echo "User email: $USER_EMAIL"
          git config user.email $USER_EMAIL & git config user.name $USER_NAME
        failOnStderr: true
        workingDirectory: $(MANIFEST_DIR)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for ArgoCD Applications and Bootstrap files"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: Prepare temporary location for raw app/infra manifests
      inputs:
        script: |
          echo "$(MANIFESTS_ARTIFACT_PATH)"
          ls -la $(MANIFESTS_ARTIFACT_PATH)
          echo "$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/"
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/

          echo "Copy k8s manifests for $(argocd.identifier) and stage them into GitOps repo directory"
          cp -r $(MANIFESTS_ARTIFACT_PATH)/* $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for bk app/infra manifests"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: '$(tokenPattern)'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: "Purge lines containing only whitespaces in argocd app manifests"
      inputs:
        script: |
          sed -i '/^[[:space:]]*$/d' $(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)
    - task: CmdLine@2
      displayName: "Add Generated Manifest to New Branch"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo \"Create a new branch$(DEPLOY_BRANCH_NAME)\"\ngit checkout -b $(DEPLOY_BRANCH_NAME)\nmkdir -p $(ARGOCD_NAMESPACE_FOLDER)\nmkdir -p $(MANIFESTS_FOLDER)\ncp $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_NAMESPACE_FOLDER)/\nls -l $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/\nls -l $(ARGOCD_SERVICE_FOLDER)/\ncp -r $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/* $(ARGOCD_SERVICE_FOLDER)/\nrsync --delete -rv $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/ $(MANIFESTS_FOLDER)/\ngit add -A 2>&1\necho 'git commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v'\ngit commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v 2>&1\n# echo 'git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v'\n# git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \ngit push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\necho \"done with initial push\"\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
    - task: CmdLine@2
      displayName: "Merge PR for GitOps repo"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
        displayName: "Create and complete Pull Request in GitOps repo"
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo $(System.AccessToken) | az devops login\naz devops configure --defaults organization=https://dev.azure.com/bki-st project=\"Default\" --use-git-aliases true\necho \"Create PR for branch $(DEPLOY_BRANCH_NAME)\"\nPR_ID=\"\"\naz repos pr create --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) --title \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\" --squash | jq '.pullRequestId' > $(Agent.TempDirectory)/PR_ID\nexport PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\necho \"PRID: $PR_ID\"\nif [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n  #az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME)\n  az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) | jq '.[] | .pullRequestId' > $(Agent.TempDirectory)/PR_ID\n  export PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\n  echo \"PRID: $PR_ID\"\n  if [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n    echo \"ERROR: could not get a PR_ID\"\n    exit 1\n  fi\nfi\n###########################\nPR_STATUS=\"\"\nif [[ $(System.debug) == 'True' ]]; then\n  echo\n  echo\n  echo \"PR_DEBUG:\"\n  echo\n  az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus'\n  echo\n  echo\nfi\nPR_TRIES=\"1 2 3 4 5\"\nfor PR_TRY in PR_TRIES\ndo\n  PR_STATUS=$(az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus')\n  if [[ \"$PR_STATUS\" == \"succeeded\" ]]; then\n    break\n  elif [[ \"$PR_STATUS\" == \"conflicts\" ]]; then\n    echo \"MERGE Confilct detected .. merge not complete\"\n    echo \"MERGE Status: $PR_STATUS\"\n\n    # ########## New Code\n    # Generate a random number between 1 and 10\n    RANDOM_WAIT=$(( ( RANDOM % 10 ) + 1 ))\n\n    # Wait for the random number of seconds\n    echo \"Waiting for $RANDOM_WAIT seconds...\"\n    sleep $RANDOM_WAIT\n\n    echo \"Checking git remote origin\"\n    git config --get-all remote.origin.fetch\n\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    echo \"Fetching latest changes from master branch\"\n    git fetch origin master\n\n    echo \"Switching to trunk\"\n    git checkout master\n\n    echo \"Pulling latest changes from remote\"\n    git pull\n\n    echo \"Switching back to $(DEPLOY_BRANCH_NAME)\"\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    # This pull was extremely helpful in understanding the underlying problem.\n    # echo \"Pulling latest changes from master branch\"\n    # git pull https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) master\n\n    echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    git merge origin/master -X ours --no-edit\n\n    #Check if the merge was successful\n    if [ $? -ne 0 ]; then\n      echo \"Merge conflicts detected. Listing conflicted files:\"\n      git diff --name-only --diff-filter=U\n    else\n      echo \"No conflicts detected.\"\n    fi\n\n    echo \"checking git status\"\n    git status\n\n    echo \"Pushing git change\"\n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n\n    echo \"checking git status\"\n    git status\n    \n\n    # echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    # git merge origin/master -X ours --no-edit\n\n    # # Check if the merge was successful\n    # if [ $? -ne 0 ]; then\n    #   CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)\n    #   echo \"Conflicted files: $CONFLICTED_FILES\"\n    #   # Resolve conflicts by preferring changes from the current branch\n    #   for FILE in $CONFLICTED_FILES; do\n    #     git checkout --ours $FILE\n    #     git add $FILE\n    #   done\n\n      # Commit the resolved conflicts\n      git commit -m \"Resolved merge conflicts by preferring current branch changes\"\n\n    # fi\n\n    echo \"Pushing merged changes into $(DEPLOY_BRANCH_NAME)\"\n    # git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n    # ## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n    echo \"done\"\n    # ########## End New Code\n\n    echo \"Resolve conflict at this URL: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\n    exit 1\n  else\n    echo \"PR_STATUS = $PR_STATUS\"\n  fi\n  sleep 1\ndone\nif [[ \"$PR_STATUS\" != \"succeeded\" ]]; then\n  echo \"Pull Request did NOT complete in 5sec .. PR not completed\"\n  echo \"Pull Request Status: $PR_STATUS\"\n  exit 1\nfi\n################################\necho \"Completing PR: deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\"\naz repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\"\n################################\nattempts=3\n## Trying to complete the PR 3 times\nwhile : ; do\n  az repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\" | jq --unbuffered '.closedBy' > closed_by_file\n  export CLOSED_BY=`cat closed_by_file`\n  echo \"PR closed by: $CLOSED_BY\"\n  if [[ $CLOSED_BY == 'null' ]]; then\n    sleep 1\n  else\n    ## Ensure that source branch is deleted\n    cd $(MANIFEST_DIR)\n    git push origin --delete $(DEPLOY_BRANCH_NAME)\n    break\n  fi\n  ((attempts--))\n  [[ $attempts > 0 ]] || break\ndone\n## If the PR has not been completed, forcing a pipeline failure\nif [[ $CLOSED_BY == 'null' ]]; then\n  echo \"##vso[task.logissue type=error]The gitops workflow was not able to complete the automated PR for for $(service.identifier) service in $(cluster.name) cluster.\"\n  exit 1\nelse\n  echo \"##[debug]Gitops PR for $(service.identifier) service in $(cluster.name) cluster completed: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\nfi\n##############################\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
  - deployment: "ArgoCD_Sync_Source_of_Truth"
    displayName: "ArgoCD_Sync_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - GitOps_Update_Source_of_Truth
    environment:
      name: Openshift jProd01
    pool:
      name: ST-AgentPool
      demands:
      - Agent.OS -equals Linux
    container:
      image: enterpriseartifactory.bkfs.com:5000/bre/containers/bre_ubi8_oc:latest
      options: --entrypoint=""
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            condition: false
            inputs:
              alias: none
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 1: $(argocd.context) > $(cluster.namespace)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# Show ArgoCD version\n  argocd version $(argocd.sync.insecure)\n# ArgoCD sync phase 1 - best effort to reach service.identifer sync:\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing root ado-$(argocd.context)'s Applications - specifically Namespace $(cluster.namespace) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(cluster.namespace) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait ado-$(argocd.context) --sync --resource argoproj.io:Application:$(cluster.namespace) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait ado-$(argocd.context) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync ado-$(argocd.context) $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true\n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait ado-$(argocd.context) --sync --operation $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 2: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# ArgoCD sync phase 2 - best effort to run Project bootstrap PreSync Hook Job and sync service.identifer(s):\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing/Running ArgoCD Namespace bootstrap Job - to create k8s Namespace $(cluster.namespace) and sync all leaf Service Applications - including $(argocd.identifier) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(argocd.identifier) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait $(cluster.namespace) --sync --resource argoproj.io:Application:$(argocd.identifier) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    if argocd app get $(cluster.namespace) $(argocd.sync.insecure) | grep rbac.authorization | grep OutOfSync\n    then\n      notsync=$((notsync+1))\n    fi\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait $(cluster.namespace) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync $(cluster.namespace) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait $(cluster.namespace) --sync --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 3: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) > $(service.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: |
                # ArgoCD sync phase 3 - wait for everything, including health:
                  date
                  try_fail="1 2 3 4 5"
                  for fail in try_fail;
                  do
                      echo "PipeStatus: ${PIPESTATUS[@]}"
                      echo -e "\n\n\n############# Syncing all k8s manifests under leaf Service Application $(argocd.identifier) #############"
                      echo "Performing sync..."
                      argocd app sync $(argocd.identifier) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi
                      echo "Post argocd app wait for active/pending --sync & --health status"
                      argocd app wait $(argocd.identifier) $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result; if [[ $(cat result) -ne 0 ]];then sleep 1;fi
                  done
                  date
- stage: OpenshiftrProd01__openshift_cluster_observability_operator__cluster_observability_operator__
  displayName: Openshift rProd01 - cluster-observability-operator
  pool:
    vmImage: ubuntu-latest
  variables:
  - name: target.k8splatform
    value: ocp
  - name: upperK8splatform
    value: OCP
  - group: Openshift rProd01 - infra
  - name: occluster.project
    value: openshift-cluster-observability-operator
  - name: cluster.namespace
    value: openshift-cluster-observability-operator
  - name: service.identifier
    value: cluster-observability-operator
  - name: image.identifier
    value: $(image.repo)/:$(Build.BuildNumber)
  - name: service.buildid
    value: '"$(Build.BuildNumber)"'
  - name: service.buildidnoquotes
    value: '$(Build.BuildNumber)'
  - name: argocd.identifier
    value: $(service.identifier)
  - name: ns.annotate.node.select
    value: ' '
  - name: cluster.gitops-name
    value: $(cluster.name)
  - name: argocd.context
    value: infra
  - name: argocdSyncTimeout
    value: '600'
  - name: argocd.sync.prune
    value: '--prune'
  - name: argocd.sync.insecure
    value: '--insecure'
  - name: argocd.syncPolicy
    value: '{}'
  - name: ado.argocd.diffignore
    value: ' '
  - name: argocd.diffignore
    value: ' '
  - name: argocd.service.labels
    value: ' '
  - name: argocd.recurse
    value: |
      directory:
            recurse: true
  - name: helm.enabled
    value: ' '
  - name: manifestspath
    value: observability
  - name: tokenPattern
    value: 'doublebraces'
  - name: semVersion
    value: 1.0
  - name: Build.BuildNumber
    value: $(semVersion)$(Rev:.r)
  - name: MANIFEST_DIR
    value: $(System.DefaultWorkingDirectory)/$(gitops.repo)
  - name: ARGOCD_APPS_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml
  - name: ARGOCD_SERVICE_MANIFEST
    value: $(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml
  - name: ARGOCD_BOOTSTRAP_APPS_RBAC
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps
  - name: ARGOCD_BOOTSTRAP_NAMESPACE
    value: $(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap
  - name: DEPLOY_BRANCH_NAME
    value: deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)
  - name: ARGOCD_SERVICE_FOLDER
    value: $(cluster.name)/$(cluster.namespace)
  - name: MANIFESTS_FOLDER
    value: $(cluster.name)/$(cluster.namespace)/$(service.identifier)
  - name: sourceCodeRepo
    value: $[ resources.repositories['srcDevRepo'].name ]
  - name: MANIFESTS_ARTIFACT_PATH
    value: $(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)
  - name: ARGOCD_NAMESPACE_FOLDER
    value: $(cluster.name)/argocd-$(argocd.context)
  - name: sub.channel
    value: stable
  - name: ip.approval
    value: Automatic
  - name: startingCSV
    value: cluster-observability-operator.v1.1.0
  - name: ip.approval
    value: Manual
  jobs:
  - job: "Validate_variables"
    displayName: "Validate_variables"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      condition: false
      inputs:
        repository: none
    - task: CmdLine@2
      displayName: "View variables"
      inputs:
        script: "echo \"Parameters passed to pipeline:\"\necho '{\n  \"argocd\": {\n    \"k8sGitOpsArgoCD\": \"\",\n    \"k8s\": {\n      \"k8splatform\": \"ocp\",\n      \"environment\": \"Openshift rProd01\",\n      \"namespace\": \"openshift-cluster-observability-operator\",\n      \"serviceIdentifier\": \"cluster-observability-operator\"\n    },\n    \"argocd\": {\n      \"context\": \"infra\",\n      \"namespaceNodeSelect\": \"worker\",\n      \"syncInsecure\": \"True\",\n      \"syncPrune\": \"True\"\n    },\n    \"manifests\": {\n      \"path\": \"observability\"\n    },\n    \"customVarsTemplate\": \"vars.yaml\"\n  },\n  \"dockerContainerRegistry\": \"\",\n  \"dockerimage\": \"\",\n  \"validateVarsOnly\": \"False\",\n  \"appDynamics\": {},\n  \"multiParallelEnv\": \"True\",\n  \"stagename\": \"Openshift rProd01__openshift-cluster-observability-operator__cluster-observability-operator__\",\n  \"selfServicePipeline\": \"False\"\n}'\ncat <<'EOF'\nStage info: \n    name: $(System.StageName) \n    display: $(System.StageDisplayName) \n    attempt: $(System.StageAttempt)\nParameters/Variables defined or defaulted when calling k8sGitOpsArgoCD listed below:\n  k8s:\n    k8splatform: $(target.k8splatform)\n    ADO Environment: Openshift rProd01\n    ADO Variable Group: Openshift rProd01 - $(argocd.context)\n    project: $(occluster.project)\n    namespace: $(cluster.namespace)\n    serviceIdentifier: $(service.identifier)\n    image.identifier: $(image.identifier)\n    service.buidid: $(service.buildid)\n    argocd.identifier: $(argocd.identifier)\n    namespaceNodeSelect: $(ns.annotate.node.select)\n  argocd: \n    context: $(argocd.context)\n    syncStep: \n    syncTimeout: $(argocdSyncTimeout)\n    syncPrune: $(argocd.sync.prune)\n    syncInsecure: $(argocd.sync.insecure)\n    autoSyncPolicy: $(argocd.syncPolicy)\n    diffIgnore: $(ado.argocd.diffignore)\n    recurse: $(argocd.recurse)\n  manifests:\n    path: $(manifestspath)\n    replaceTokenPattern: $(tokenPattern)\n  customVarsTemplate: vars.yaml\nMisc ADO build vars:\n  semVersion: $(semVersion)\n  Build.BuildNumber: $(Build.BuildNumber)\nGitOps Directories involved in next steps:\n  MANIFEST_DIR: $(MANIFEST_DIR)\n  ARGOCD_APPS_MANIFEST: $(ARGOCD_APPS_MANIFEST)\n  ARGOCD_SERVICE_MANIFEST: $(ARGOCD_SERVICE_MANIFEST)\n  ARGOCD_BOOTSTRAP_APPS_RBAC: $(ARGOCD_BOOTSTRAP_APPS_RBAC)\n  ARGOCD_BOOTSTRAP_NAMESPACE: $(ARGOCD_BOOTSTRAP_NAMESPACE)\n  DEPLOY_BRANCH_NAME: $(DEPLOY_BRANCH_NAME)\n  ARGOCD_SERVICE_FOLDER: $(ARGOCD_SERVICE_FOLDER)\n  MANIFESTS_FOLDER: $(MANIFESTS_FOLDER)\n  MANIFESTS_ARTIFACT_PATH: $(MANIFESTS_ARTIFACT_PATH)\n  ARGOCD_NAMESPACE_FOLDER: $(ARGOCD_NAMESPACE_FOLDER)\nEOF\necho \"Variables passed in from App team var template:\"\necho '{\n  \"system\": \"build\",\n  \"system.hosttype\": \"build\",\n  \"system.servertype\": \"Hosted\",\n  \"system.culture\": \"en-US\",\n  \"system.collectionId\": \"a1d50930-84e6-45c1-8b89-a50cf285f127\",\n  \"system.collectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.teamFoundationCollectionUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.taskDefinitionsUri\": \"https://dev.azure.com/bki-st/\",\n  \"system.pipelineStartTime\": \"2025-04-21 12:03:10-04:00\",\n  \"system.teamProject\": \"Default\",\n  \"system.teamProjectId\": \"61eb34c0-17a0-4875-b525-7a0b0072c15e\",\n  \"system.definitionId\": \"9071\",\n  \"build.definitionName\": \"ocp-cluster-observability-ado\",\n  \"build.repository.id\": \"facbd320-4176-47dc-a2e9-10270df8e4eb\",\n  \"build.repository.name\": \"ocp-cluster-observability\",\n  \"build.repository.uri\": \"https://dev.azure.com/bki-st/Default/_git/ocp-cluster-observability\",\n  \"build.definitionVersion\": \"4\",\n  \"USE_MSDEPLOY_TOKEN_AUTH\": \"true\",\n  \"DistributedTask.Agent.AddForceCredentialsToGitCheckout\": \"True\",\n  \"DistributedTask.Agent.AgentEnablePipelineArtifactLargeChunkSize\": \"True\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated\": \"False\",\n  \"DistributedTask.Agent.CheckIfTaskNodeRunnerIsDeprecated246\": \"False\",\n  \"DistributedTask.Agent.CleanupPsModulesInPowershell\": \"False\",\n  \"DistributedTask.Agent.ContinueAfterCancelProcessTreeKillAttempt\": \"True\",\n  \"DistributedTask.Agent.DockerActionRetries\": \"True\",\n  \"DistributedTask.Agent.EnableAdditionalMaskingRegexes\": \"True\",\n  \"DistributedTask.Agent.EnableIssueSourceValidation\": \"True\",\n  \"DistributedTask.Agent.EnableResourceMonitorDebugOutput\": \"True\",\n  \"DistributedTask.Agent.EnableResourceUtilizationWarnings\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedBuildTask\": \"True\",\n  \"DistributedTask.Agent.FailDeprecatedTask\": \"True\",\n  \"DistributedTask.Agent.FailJobWhenAgentDies\": \"True\",\n  \"DistributedTask.Agent.FixPossibleGitOutOfMemoryProblem\": \"False\",\n  \"DistributedTask.Agent.ForceUpdateToLatest2Version\": \"False\",\n  \"DistributedTask.Agent.IgnoreVSTSTaskLib\": \"True\",\n  \"DistributedTask.Agent.LogTaskNameInUserAgent\": \"True\",\n  \"DistributedTask.Agent.LogToBlobstorageService\": \"True\",\n  \"DistributedTask.Agent.MountWorkspace\": \"True\",\n  \"DistributedTask.Agent.ReadOnlyVariables\": \"True\",\n  \"DistributedTask.Agent.Rosetta2Warning\": \"True\",\n  \"DistributedTask.Agent.UploadBuildArtifactsToBlob\": \"True\",\n  \"DistributedTask.Agent.UploadTimelineAttachmentsToBlob\": \"True\",\n  \"DistributedTask.Agent.UseDockerComposeV2CompatibleMode\": \"False\",\n  \"DistributedTask.Agent.UseFetchFilterInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseGitLongPaths\": \"True\",\n  \"DistributedTask.Agent.UseInteropToFindParentProcess\": \"True\",\n  \"DistributedTask.Agent.UseLatestGitVersion\": \"True\",\n  \"DistributedTask.Agent.UseMsalLibrary\": \"True\",\n  \"DistributedTask.Agent.USENEWNODEHANDLERTELEMETRY\": \"True\",\n  \"DistributedTask.Agent.UseNode20ToStartContainer\": \"True\",\n  \"DistributedTask.Agent.UseSparseCheckoutInCheckoutTask\": \"True\",\n  \"DistributedTask.Agent.UseWorkspaceId\": \"True\",\n  \"DistributedTask.Tasks.CopyFilesOverSSHV0UseQueue\": \"True\",\n  \"DistributedTask.Tasks.ModifyNumberOfRetriesInRobocopy\": \"True\",\n  \"DistributedTask.Tasks.Node.SkipDebugLogsWhenDebugModeOff\": \"True\",\n  \"DistributedTask.Tasks.RetireAzureRMPowerShellModule\": \"True\",\n  \"DistributedTask.Tasks.useJacocoTemplateV2forSingleModule\": \"True\",\n  \"DistributedTask.Tasks.UseLatestOpensslVersion\": \"True\",\n  \"build.definitionFolderPath\": \"\\\\ocp-native-ado\",\n  \"VSTSAGENT_CONTINUE_AFTER_CANCEL_PROCESSTREEKILL_ATTEMPT\": \"true\",\n  \"VSTSAGENT_DOCKER_ACTION_RETRIES\": \"true\",\n  \"USE_MSAL\": \"true\",\n  \"AZP_75787_ENABLE_COLLECT\": \"true\",\n  \"AZP_75787_ENABLE_NEW_PH_LOGIC\": \"true\",\n  \"AZP_AGENT_CHECK_FOR_TASK_DEPRECATION\": \"true\",\n  \"AZP_AGENT_MOUNT_WORKSPACE\": \"true\",\n  \"AZP_AGENT_IGNORE_VSTSTASKLIB\": \"true\",\n  \"AZP_PS_ENABLE_INVOKE_PROCESS\": \"true\",\n  \"FAIL_DEPRECATED_TASK\": \"true\",\n  \"AZP_AGENT_LOG_TASKNAME_IN_USERAGENT\": \"true\",\n  \"AGENT_USE_FETCH_FILTER_IN_CHECKOUT_TASK\": \"true\",\n  \"AGENT_USE_SPARSE_CHECKOUT_IN_CHECKOUT_TASK\": \"true\",\n  \"USE_OPENSSL_LATEST_VERSION\": \"true\",\n  \"MODIFY_NUMBER_OF_RETRIES_IN_ROBOCOPY\": \"true\",\n  \"AZP_75787_ENABLE_NEW_LOGIC\": \"false\",\n  \"AZP_75787_ENABLE_NEW_LOGIC_LOG\": \"false\",\n  \"AGENT_ENABLE_PIPELINEARTIFACT_LARGE_CHUNK_SIZE\": \"true\",\n  \"FAIL_JOB_WHEN_AGENT_DIES\": \"true\",\n  \"USE_LATEST_GIT_VERSION\": \"true\",\n  \"USE_GIT_LONG_PATHS\": \"true\",\n  \"ENABLE_ISSUE_SOURCE_VALIDATION\": \"true\",\n  \"RETIRE_AZURERM_POWERSHELL_MODULE\": \"true\",\n  \"AZP_ENABLE_RESOURCE_MONITOR_DEBUG_OUTPUT\": \"true\",\n  \"AZP_ENABLE_RESOURCE_UTILIZATION_WARNINGS\": \"true\",\n  \"FAIL_DEPRECATED_BUILD_TASK\": \"true\",\n  \"AZP_AGENT_USE_INTEROP_TO_FIND_PARENT_PROCESS\": \"true\",\n  \"ROSETTA2_WARNING\": \"true\",\n  \"COPYFILESOVERSSHV0_USE_QUEUE\": \"true\",\n  \"USE_FIXED_AZ_CONFIG_INIT\": \"true\",\n  \"USE_AKS_CREDENTIAL_API\": \"true\",\n  \"build.queuedBy\": \"Johnson, Rohan\",\n  \"build.queuedById\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedFor\": \"Johnson, Rohan\",\n  \"build.requestedForId\": \"a17fd5ad-d631-4d8e-a1cf-c242cb41e3cc\",\n  \"build.requestedForEmail\": \"Rohan.Johnson@bkfs.com\",\n  \"build.sourceVersion\": \"5b7f7eab5db2124d93fc9dbb2a6724441802c2af\",\n  \"build.sourceBranch\": \"refs/heads/main\",\n  \"build.sourceBranchName\": \"main\",\n  \"build.reason\": \"Manual\",\n  \"system.pullRequest.isFork\": \"False\",\n  \"system.jobParallelismTag\": \"Private\",\n  \"system.enableAccessToken\": \"SecretVariable\",\n  \"target.k8splatform\": \"ocp\",\n  \"upperK8splatform\": \"OCP\",\n  \"occluster.project\": \"openshift-cluster-observability-operator\",\n  \"cluster.namespace\": \"openshift-cluster-observability-operator\",\n  \"service.identifier\": \"cluster-observability-operator\",\n  \"image.identifier\": \"$(image.repo)/:$(Build.BuildNumber)\",\n  \"service.buildid\": \"\\\"$(Build.BuildNumber)\\\"\",\n  \"service.buildidnoquotes\": \"$(Build.BuildNumber)\",\n  \"argocd.identifier\": \"$(service.identifier)\",\n  \"ns.annotate.node.select\": \" \",\n  \"cluster.gitops-name\": \"$(cluster.name)\",\n  \"argocd.context\": \"infra\",\n  \"argocdSyncTimeout\": \"600\",\n  \"argocd.sync.prune\": \"--prune\",\n  \"argocd.sync.insecure\": \"--insecure\",\n  \"argocd.syncPolicy\": \"{}\",\n  \"ado.argocd.diffignore\": \" \",\n  \"argocd.diffignore\": \" \",\n  \"argocd.service.labels\": \" \",\n  \"argocd.recurse\": \"directory:\\n      recurse: true\\n\",\n  \"helm.enabled\": \" \",\n  \"manifestspath\": \"observability\",\n  \"tokenPattern\": \"doublebraces\",\n  \"semVersion\": \"1.0\",\n  \"Build.BuildNumber\": \"$(semVersion)$(Rev:.r)\",\n  \"MANIFEST_DIR\": \"$(System.DefaultWorkingDirectory)/$(gitops.repo)\",\n  \"ARGOCD_APPS_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-namespaces/applications/argocd-namespace-app.yaml\",\n  \"ARGOCD_SERVICE_MANIFEST\": \"$(System.DefaultWorkingDirectory)/argocd/k8s-argocd-services/applications/argocd-service-app.yaml\",\n  \"ARGOCD_BOOTSTRAP_APPS_RBAC\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap-apps\",\n  \"ARGOCD_BOOTSTRAP_NAMESPACE\": \"$(System.DefaultWorkingDirectory)/argocd/ocp-argocd-projects/bootstrap\",\n  \"DEPLOY_BRANCH_NAME\": \"deploy/$(Build.BuildNumber)/$(environment.identifier)/$(argocd.identifier)\",\n  \"ARGOCD_SERVICE_FOLDER\": \"$(cluster.name)/$(cluster.namespace)\",\n  \"MANIFESTS_FOLDER\": \"$(cluster.name)/$(cluster.namespace)/$(service.identifier)\",\n  \"sourceCodeRepo\": \"$[ resources.repositories['srcDevRepo'].name ]\",\n  \"MANIFESTS_ARTIFACT_PATH\": \"$(Build.SourcesDirectory)/$(sourceCodeRepo)/$(manifestspath)\",\n  \"ARGOCD_NAMESPACE_FOLDER\": \"$(cluster.name)/argocd-$(argocd.context)\",\n  \"sub.channel\": \"stable\",\n  \"ip.approval\": \"Manual\",\n  \"startingCSV\": \"cluster-observability-operator.v1.1.0\"\n}' | sed '/ARGOCD_NAMESPACE_FOLDER/,$!d ; /ARGOCD_NAMESPACE_FOLDER/d ; /^}/d'\n"
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Validate variables"
      inputs:
        script: |
          if ! [[ "$(argocd.context)" =~ ^(apps|infra)$ ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.argocd.context must be \"apps\" or \"infra\"" ; exit 1 ; fi
          if ! [[ "$(target.k8splatform)" =~ ^(eks|ocp)$ ]] ; then echo "ERROR - variable k8splatform must be \"eks\" or \"ocp\"" ; exit 1 ; fi
          if [[ "$(manifestspath)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.manifests.path is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(occluster.project)" == "MISSING" ]] ; then echo "ERROR - parameters.k8sGitOpsArgoCD.k8s.namespace is missing from your pipeline" ; exit 1 ; fi
          if [[ "$(service.identifier)" == "MISSING" ]] ; then echo "ERROR - parameters.argocd.k8s.serviceIdentifier is missing from your pipeline" ; exit 1 ; fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
  - job: "GitOps_Update_Source_of_Truth"
    displayName: "GitOps_Update_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - Validate_variables
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://Default/openshift-gitops-infra@master
        persistCredentials: true
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: git://bre/argocd@master
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: srcDevRepo
    - task: CmdLine@2
      displayName: "Prepare temporary location for raw ArgoCD manifests"
      inputs:
        script: |
          #echo "$(image)"
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)
          mkdir -p $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)
          echo "System.DefaultWorkingDirectory = $(System.DefaultWorkingDirectory)"
          echo "Build.SourcesDirectory = $(Build.SourcesDirectory)"
          echo "Build.DefinitionName = $(Build.DefinitionName)"
          #echo "tree Build.SourcesDirectory"
          #tree $(Build.SourcesDirectory)
          #echo "tree Pipeline.Workspace"
          #tree $(Pipeline.Workspace)/
          #echo "tree DEPLOY_BRANCH_NAME"
          #tree $(DEPLOY_BRANCH_NAME)/
          #tree $(Pipeline.Workspace)
          echo "Copy ArgoCD Namespace Application template to GitOps repo directory"
          cp $(ARGOCD_APPS_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml
          echo "Copy ArgoCD Service Application template to GitOps repo directory"
          cp $(ARGOCD_SERVICE_MANIFEST) $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
          echo "Copy ArgoCD Bootstrap Namespace template(s) to GitOps repo directory"
          cp $(ARGOCD_BOOTSTRAP_NAMESPACE)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          if [[ "$(argocd.context)" == "apps" && "$(target.k8splatform)" == "ocp" ]] || [[ "$(target.k8splatform)" == "eks" ]]  ; then
            echo "Copy ArgoCD Namespace RBAC template(s) to GitOps repo directory"
            cp $(ARGOCD_BOOTSTRAP_APPS_RBAC)/* $(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/
          fi
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: CmdLine@2
      displayName: "Configure Git"
      env:
        USER_NAME: "Git-Ops"
        USER_EMAIL: "<>"
      retryCountOnTaskFailure: 2
      inputs:
        script: |
          echo "User: $USER_NAME"
          echo "User email: $USER_EMAIL"
          git config user.email $USER_EMAIL & git config user.name $USER_NAME
        failOnStderr: true
        workingDirectory: $(MANIFEST_DIR)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for ArgoCD Applications and Bootstrap files"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: 'doublebraces'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: Prepare temporary location for raw app/infra manifests
      inputs:
        script: |
          echo "$(MANIFESTS_ARTIFACT_PATH)"
          ls -la $(MANIFESTS_ARTIFACT_PATH)
          echo "$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/"
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/

          echo "Copy k8s manifests for $(argocd.identifier) and stage them into GitOps repo directory"
          cp -r $(MANIFESTS_ARTIFACT_PATH)/* $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
          ls -la $(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)
    - task: qetza.replacetokens.replacetokens-task.replacetokens@6
      displayName: "Match and replace task for bk app/infra manifests"
      continueOnError: 'false'
      inputs:
        rootDirectory: '$(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)'
        targetFiles: |
          **/*.yaml
          **/*.yml
          **/*.json
          **/*.jsonnet
          **/*.libsonnet
          **/*.sh
        encoding: 'auto'
        tokenPattern: '$(tokenPattern)'
        addBOM: true
        logLevel: 'debug'
        actionOnMissing: 'error'
        missingVarAction: 'keep'
        ifNoFilesFound: 'error'
        recursive: false
        telemetryOptout: true
    - task: CmdLine@2
      displayName: "Purge lines containing only whitespaces in argocd app manifests"
      inputs:
        script: |
          sed -i '/^[[:space:]]*$/d' $(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_SERVICE_FOLDER)/$(service.identifier).yaml
        failOnStderr: true
        workingDirectory: $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)
    - task: CmdLine@2
      displayName: "Add Generated Manifest to New Branch"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo \"Create a new branch$(DEPLOY_BRANCH_NAME)\"\ngit checkout -b $(DEPLOY_BRANCH_NAME)\nmkdir -p $(ARGOCD_NAMESPACE_FOLDER)\nmkdir -p $(MANIFESTS_FOLDER)\ncp $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_NAMESPACE_FOLDER)/$(cluster.namespace).yaml $(ARGOCD_NAMESPACE_FOLDER)/\nls -l $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/\nls -l $(ARGOCD_SERVICE_FOLDER)/\ncp -r $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(ARGOCD_SERVICE_FOLDER)/* $(ARGOCD_SERVICE_FOLDER)/\nrsync --delete -rv $(Pipeline.Workspace)/$(DEPLOY_BRANCH_NAME)/$(MANIFESTS_FOLDER)/ $(MANIFESTS_FOLDER)/\ngit add -A 2>&1\necho 'git commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v'\ngit commit -m \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environmentname)\" -v 2>&1\n# echo 'git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v'\n# git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \ngit push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\necho \"done with initial push\"\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
    - task: CmdLine@2
      displayName: "Merge PR for GitOps repo"
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        AZURE_DEVOPS_CLI_PAT: $(System.AccessToken)
        displayName: "Create and complete Pull Request in GitOps repo"
      retryCountOnTaskFailure: 2
      inputs:
        script: "echo $(System.AccessToken) | az devops login\naz devops configure --defaults organization=https://dev.azure.com/bki-st project=\"Default\" --use-git-aliases true\necho \"Create PR for branch $(DEPLOY_BRANCH_NAME)\"\nPR_ID=\"\"\naz repos pr create --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) --title \"deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\" --squash | jq '.pullRequestId' > $(Agent.TempDirectory)/PR_ID\nexport PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\necho \"PRID: $PR_ID\"\nif [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n  #az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME)\n  az repos pr list --project Default --repository $(gitops.repo) --target-branch master --source-branch $(DEPLOY_BRANCH_NAME) | jq '.[] | .pullRequestId' > $(Agent.TempDirectory)/PR_ID\n  export PR_ID=`cat $(Agent.TempDirectory)/PR_ID`\n  echo \"PRID: $PR_ID\"\n  if [[ \"$PR_ID\" == \"\" || \"$PR_ID\" == null ]]; then\n    echo \"ERROR: could not get a PR_ID\"\n    exit 1\n  fi\nfi\n###########################\nPR_STATUS=\"\"\nif [[ $(System.debug) == 'True' ]]; then\n  echo\n  echo\n  echo \"PR_DEBUG:\"\n  echo\n  az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus'\n  echo\n  echo\nfi\nPR_TRIES=\"1 2 3 4 5\"\nfor PR_TRY in PR_TRIES\ndo\n  PR_STATUS=$(az repos pr show --id $PR_ID --organization=$(System.TeamFoundationCollectionUri) --output json | jq -r '.mergeStatus')\n  if [[ \"$PR_STATUS\" == \"succeeded\" ]]; then\n    break\n  elif [[ \"$PR_STATUS\" == \"conflicts\" ]]; then\n    echo \"MERGE Confilct detected .. merge not complete\"\n    echo \"MERGE Status: $PR_STATUS\"\n\n    # ########## New Code\n    # Generate a random number between 1 and 10\n    RANDOM_WAIT=$(( ( RANDOM % 10 ) + 1 ))\n\n    # Wait for the random number of seconds\n    echo \"Waiting for $RANDOM_WAIT seconds...\"\n    sleep $RANDOM_WAIT\n\n    echo \"Checking git remote origin\"\n    git config --get-all remote.origin.fetch\n\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    echo \"Fetching latest changes from master branch\"\n    git fetch origin master\n\n    echo \"Switching to trunk\"\n    git checkout master\n\n    echo \"Pulling latest changes from remote\"\n    git pull\n\n    echo \"Switching back to $(DEPLOY_BRANCH_NAME)\"\n    git checkout $(DEPLOY_BRANCH_NAME)\n\n    # This pull was extremely helpful in understanding the underlying problem.\n    # echo \"Pulling latest changes from master branch\"\n    # git pull https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) master\n\n    echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    git merge origin/master -X ours --no-edit\n\n    #Check if the merge was successful\n    if [ $? -ne 0 ]; then\n      echo \"Merge conflicts detected. Listing conflicted files:\"\n      git diff --name-only --diff-filter=U\n    else\n      echo \"No conflicts detected.\"\n    fi\n\n    echo \"checking git status\"\n    git status\n\n    echo \"Pushing git change\"\n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n\n    echo \"checking git status\"\n    git status\n    \n\n    # echo \"Attempting to merge master into $(DEPLOY_BRANCH_NAME)\"\n    # git merge origin/master -X ours --no-edit\n\n    # # Check if the merge was successful\n    # if [ $? -ne 0 ]; then\n    #   CONFLICTED_FILES=$(git diff --name-only --diff-filter=U)\n    #   echo \"Conflicted files: $CONFLICTED_FILES\"\n    #   # Resolve conflicts by preferring changes from the current branch\n    #   for FILE in $CONFLICTED_FILES; do\n    #     git checkout --ours $FILE\n    #     git add $FILE\n    #   done\n\n      # Commit the resolved conflicts\n      git commit -m \"Resolved merge conflicts by preferring current branch changes\"\n\n    # fi\n\n    echo \"Pushing merged changes into $(DEPLOY_BRANCH_NAME)\"\n    # git push --set-upstream origin $(DEPLOY_BRANCH_NAME) -v 2>&1\n    # ## above stopped working for some reason after months of success \"fatal: could not read Password for 'https://bki-st@dev.azure.com': terminal prompts disabled\" \n    git push --repo https://$SYSTEM_ACCESSTOKEN@dev.azure.com/bki-st/Default/_git/$(gitops.repo) -v 2>&1\n    echo \"done\"\n    # ########## End New Code\n\n    echo \"Resolve conflict at this URL: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\n    exit 1\n  else\n    echo \"PR_STATUS = $PR_STATUS\"\n  fi\n  sleep 1\ndone\nif [[ \"$PR_STATUS\" != \"succeeded\" ]]; then\n  echo \"Pull Request did NOT complete in 5sec .. PR not completed\"\n  echo \"Pull Request Status: $PR_STATUS\"\n  exit 1\nfi\n################################\necho \"Completing PR: deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier)\"\naz repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for deployment $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\"\n################################\nattempts=3\n## Trying to complete the PR 3 times\nwhile : ; do\n  az repos pr update --id $PR_ID --status completed --bypass-policy true --delete-source-branch true --transition-work-items true --merge-commit-message \"Updates for $(Build.BuildNumber) of $(argocd.identifier) to $(environment.identifier) are complete.\" | jq --unbuffered '.closedBy' > closed_by_file\n  export CLOSED_BY=`cat closed_by_file`\n  echo \"PR closed by: $CLOSED_BY\"\n  if [[ $CLOSED_BY == 'null' ]]; then\n    sleep 1\n  else\n    ## Ensure that source branch is deleted\n    cd $(MANIFEST_DIR)\n    git push origin --delete $(DEPLOY_BRANCH_NAME)\n    break\n  fi\n  ((attempts--))\n  [[ $attempts > 0 ]] || break\ndone\n## If the PR has not been completed, forcing a pipeline failure\nif [[ $CLOSED_BY == 'null' ]]; then\n  echo \"##vso[task.logissue type=error]The gitops workflow was not able to complete the automated PR for for $(service.identifier) service in $(cluster.name) cluster.\"\n  exit 1\nelse\n  echo \"##[debug]Gitops PR for $(service.identifier) service in $(cluster.name) cluster completed: https://dev.azure.com/bki-st/Default/_git/$(gitops.repo)/pullrequest/$PR_ID\"\nfi\n##############################\n"
        failOnStderr: false
        workingDirectory: $(MANIFEST_DIR)
  - deployment: "ArgoCD_Sync_Source_of_Truth"
    displayName: "ArgoCD_Sync_Source_of_Truth"
    condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
    dependsOn:
    - GitOps_Update_Source_of_Truth
    environment:
      name: Openshift rProd01
    pool:
      name: ST-AgentPool
      demands:
      - Agent.OS -equals Linux
    container:
      image: enterpriseartifactory.bkfs.com:5000/bre/containers/bre_ubi8_oc:latest
      options: --entrypoint=""
    strategy:
      runOnce:
        deploy:
          steps:
          - task: 30f35852-3f7e-4c0c-9a88-e127b4f97211@1
            condition: false
            inputs:
              alias: none
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 1: $(argocd.context) > $(cluster.namespace)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# Show ArgoCD version\n  argocd version $(argocd.sync.insecure)\n# ArgoCD sync phase 1 - best effort to reach service.identifer sync:\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing root ado-$(argocd.context)'s Applications - specifically Namespace $(cluster.namespace) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(cluster.namespace) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait ado-$(argocd.context) --sync --resource argoproj.io:Application:$(cluster.namespace) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait ado-$(argocd.context) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync ado-$(argocd.context) $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true\n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait ado-$(argocd.context) --sync --operation $(argocd.sync.insecure) --resource argoproj.io:Application:$(cluster.namespace) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 1:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 2: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: "# ArgoCD sync phase 2 - best effort to run Project bootstrap PreSync Hook Job and sync service.identifer(s):\n  echo \"PipeStatus: ${PIPESTATUS[@]}\"\n  echo -e \"\\n\\n\\n############# Syncing/Running ArgoCD Namespace bootstrap Job - to create k8s Namespace $(cluster.namespace) and sync all leaf Service Applications - including $(argocd.identifier) #############\"\n  argoappcheck() {\n    date\n    notsync=0\n    argocd app get $(argocd.identifier) --hard-refresh $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    argocd app wait $(cluster.namespace) --sync --resource argoproj.io:Application:$(argocd.identifier) --timeout 1 $(argocd.sync.insecure) > /dev/null 2>&1\n    notsync=$((notsync+$?))\n    if argocd app get $(cluster.namespace) $(argocd.sync.insecure) | grep rbac.authorization | grep OutOfSync\n    then\n      notsync=$((notsync+1))\n    fi\n    date\n  }\n  argoappcheck\n  if [ $notsync -gt 0 ]\n  then\n    echo \"Initial argocd app wait for active/pending --sync & --operations status\"\n    argocd app wait $(cluster.namespace) --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Performing sync...\"\n    argocd app sync $(cluster.namespace) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    echo \"Post argocd app wait for active/pending --sync & --health status\"\n    argocd app wait $(cluster.namespace) --sync --operation $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 2:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi || true \n    date\n  else\n    # Adding this if/then/else logic to help mitigate collisions for sync operations in ArgoCD. ArgoCD doesn't have queing for multiple requests coming in. \n    #   Simplest first step in Apps-of-Apps structure; if parent Applications don't need synced then do nothing.\n    echo \"Nothing to do, $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) Application shows already in SYNC.\"\n  fi\n"
          - task: CmdLine@2
            env:
              ARGOCD_SERVER: $(argocd.server)
              ARGOCD_OPTS: "--grpc-web"
              ARGOCD_AUTH_TOKEN: $(argocd.auth)
            displayName: "ArgoCD sync phase 3: $(argocd.context) > $(cluster.namespace) > $(argocd.identifier) > $(service.identifier)"
            retryCountOnTaskFailure: 3
            inputs:
              script: |
                # ArgoCD sync phase 3 - wait for everything, including health:
                  date
                  try_fail="1 2 3 4 5"
                  for fail in try_fail;
                  do
                      echo "PipeStatus: ${PIPESTATUS[@]}"
                      echo -e "\n\n\n############# Syncing all k8s manifests under leaf Service Application $(argocd.identifier) #############"
                      echo "Performing sync..."
                      argocd app sync $(argocd.identifier) $(argocd.sync.insecure) $(argocd.sync.prune) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result;if [[ $(cat result) -ne 0 ]];then exit 1;fi
                      echo "Post argocd app wait for active/pending --sync & --health status"
                      argocd app wait $(argocd.identifier) $(argocd.sync.insecure) --timeout $(argocdSyncTimeout) 2>&1 | sed 's/^/ArgoCD sync phase 3:    /';echo ${PIPESTATUS[@]}|sed 's/ //' > result; if [[ $(cat result) -ne 0 ]];then sleep 1;fi
                  done
                  date

